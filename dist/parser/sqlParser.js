/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var sqlParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,3],$V1=[21,22,24,25,26,27,28,29,30,31,34,35,39,41,42,44,45,47,48,50,53,67,70,72,73,74,75,77,78,79,92],$V2=[22,24,25,26,27,28,29,30,31,34,35,39,41,42,44,45,47,48,50,53,67,70,72,73,74,75,77,78,79,92],$V3=[24,25,26,27,28,29,30,31,34,35,39,41,42,44,45,47,48,50,53,67,70,72,73,74,75,77,78,79,92],$V4=[24,26,27,28,29,30,31,34,35,39,41,42,44,45,47,48,50,53,67,70,72,73,74,75,77,78,79,92],$V5=[24,27,28,29,30,31,34,35,39,41,42,44,45,47,48,50,53,67,70,72,73,74,75,77,78,79,92],$V6=[24,28,29,30,31,34,35,39,41,42,44,45,47,48,50,53,67,70,72,73,74,75,77,78,79,92],$V7=[24,29,30,31,34,35,39,41,42,44,45,47,48,50,53,67,70,72,73,74,75,77,78,79,92],$V8=[24,31,34,35,39,41,42,44,45,47,48,50,53,67,70,72,73,74,75,77,78,79,92],$V9=[24,34,35,39,41,42,44,45,47,48,50,53,67,70,72,73,74,75,77,78,79,92],$Va=[1,60],$Vb=[1,30],$Vc=[1,31],$Vd=[1,51],$Ve=[1,58],$Vf=[1,59],$Vg=[1,61],$Vh=[1,62],$Vi=[1,63],$Vj=[1,64],$Vk=[1,65],$Vl=[1,42],$Vm=[1,57],$Vn=[1,52],$Vo=[1,53],$Vp=[1,54],$Vq=[1,55],$Vr=[1,56],$Vs=[1,43],$Vt=[1,44],$Vu=[1,45],$Vv=[1,34],$Vw=[5,55],$Vx=[5,32,55,149],$Vy=[1,73],$Vz=[1,70],$VA=[1,71],$VB=[1,72],$VC=[1,74],$VD=[5,24,25,32,38,39,55,62,63,65,68,80,98,115,116,117,118,120,124,126,130,133,134,136,142,144,146,149,156,157,159,160,165,169,171,172,174],$VE=[5,23,24,25,32,38,39,55,62,63,65,68,80,98,103,104,105,106,107,108,112,115,116,117,118,120,124,126,130,133,134,136,142,144,146,149,156,157,159,160,165,169,171,172,174],$VF=[1,95],$VG=[1,93],$VH=[1,94],$VI=[1,89],$VJ=[1,90],$VK=[1,91],$VL=[1,92],$VM=[1,96],$VN=[1,97],$VO=[1,98],$VP=[1,99],$VQ=[1,100],$VR=[1,101],$VS=[2,91],$VT=[5,23,24,25,32,34,38,39,55,62,63,65,68,70,72,80,82,83,84,85,86,87,88,89,90,92,96,97,98,99,100,101,103,104,105,106,107,108,112,115,116,117,118,120,124,126,130,133,134,136,142,144,146,149,156,157,159,160,165,169,171,172,174],$VU=[5,23,24,25,32,34,38,39,55,62,63,65,68,70,72,80,82,83,84,85,86,87,88,89,90,92,94,96,97,98,99,100,101,103,104,105,106,107,108,112,115,116,117,118,120,124,126,130,133,134,136,142,144,146,149,156,157,159,160,165,169,171,172,174],$VV=[1,102],$VW=[1,109],$VX=[2,52],$VY=[1,110],$VZ=[1,126],$V_=[1,122],$V$=[18,24,39,41,42,44,45,47,48,50,53,67,70,72,73,74,75,77,78,79,110],$V01=[1,157],$V11=[32,55],$V21=[2,47],$V31=[1,166],$V41=[1,164],$V51=[1,165],$V61=[2,185],$V71=[1,171],$V81=[1,172],$V91=[5,24,32,55,120,126,130,136,142,144,146,174],$Va1=[1,174],$Vb1=[1,177],$Vc1=[1,178],$Vd1=[1,179],$Ve1=[1,180],$Vf1=[2,162],$Vg1=[1,176],$Vh1=[5,24,25,32,55,80,120,126,130,136,142,144,146,156,157,159,160,165,169,171,172,174],$Vi1=[5,24,25,32,38,39,55,62,63,65,68,80,116,117,118,120,124,126,130,133,134,136,142,144,146,149,156,157,159,160,165,169,171,172,174],$Vj1=[5,23,24,25,32,38,39,55,62,63,65,68,80,82,83,84,85,90,92,96,97,98,99,100,101,103,104,105,106,107,108,112,115,116,117,118,120,124,126,130,133,134,136,142,144,146,149,156,157,159,160,165,169,171,172,174],$Vk1=[5,23,24,25,32,38,39,55,62,63,65,68,70,72,80,82,83,84,85,90,92,96,97,98,99,100,101,103,104,105,106,107,108,112,115,116,117,118,120,124,126,130,133,134,136,142,144,146,149,156,157,159,160,165,169,171,172,174],$Vl1=[5,24,55,126,130,136,142,144,146],$Vm1=[1,213],$Vn1=[2,167],$Vo1=[162,165],$Vp1=[5,24,25,32,55,80,120,126,130,136,142,144,146,156,157,159,160,165,169,171,172,174,186,187,188],$Vq1=[2,187],$Vr1=[1,218],$Vs1=[5,24,55,130,136,142,144,146],$Vt1=[1,241],$Vu1=[1,249],$Vv1=[1,250],$Vw1=[1,251],$Vx1=[5,24,55,130,142,144,146],$Vy1=[1,270],$Vz1=[1,276],$VA1=[1,277],$VB1=[62,65,68],$VC1=[5,24,55,142,144,146],$VD1=[2,131],$VE1=[1,286],$VF1=[1,287],$VG1=[5,24,32,55,124,130,136,142,144,146],$VH1=[2,192],$VI1=[1,296],$VJ1=[53,144],$VK1=[5,55,142,144,146],$VL1=[5,55,144,146],$VM1=[1,336];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"main":3,"selectClause":4,"EOF":5,"SELECT":6,"distinctOpt":7,"highPriorityOpt":8,"maxStateMentTimeOpt":9,"straightJoinOpt":10,"sqlSmallResultOpt":11,"sqlBigResultOpt":12,"sqlBufferResultOpt":13,"sqlCacheOpt":14,"sqlCalcFoundRowsOpt":15,"selectExprList":16,"selectDataSetOpt":17,"ALL":18,"DISTINCT":19,"DISTINCTROW":20,"HIGH_PRIORITY":21,"MAX_STATEMENT_TIME":22,"=":23,"NUMERIC":24,"STRAIGHT_JOIN":25,"SQL_SMALL_RESULT":26,"SQL_BIG_RESULT":27,"SQL_BUFFER_RESULT":28,"SQL_CACHE":29,"SQL_NO_CACHE":30,"SQL_CALC_FOUND_ROWS":31,",":32,"selectExpr":33,"*":34,"SELECT_EXPR_STAR":35,"expr":36,"selectExprAliasOpt":37,"AS":38,"IDENTIFIER":39,"string":40,"QUOTED_IDENTIFIER":41,"STRING":42,"number":43,"EXPONENT_NUMERIC":44,"HEX_NUMERIC":45,"boolean":46,"TRUE":47,"FALSE":48,"null":49,"NULL":50,"literal":51,"function_call":52,"(":53,"function_call_param_list":54,")":55,"function_call_param":56,"identifier":57,"DOT":58,"identifier_list":59,"case_expr":60,"when_then_list":61,"WHEN":62,"THEN":63,"case_when_else":64,"ELSE":65,"case_when":66,"CASE":67,"END":68,"simple_expr_prefix":69,"+":70,"simple_expr":71,"-":72,"~":73,"!":74,"BINARY":75,"expr_list":76,"ROW":77,"EXISTS":78,"{":79,"}":80,"bit_expr":81,"|":82,"&":83,"<<":84,">>":85,"/":86,"DIV":87,"MOD":88,"%":89,"^":90,"not_opt":91,"NOT":92,"escape_opt":93,"ESCAPE":94,"predicate":95,"IN":96,"BETWEEN":97,"AND":98,"SOUNDS":99,"LIKE":100,"REGEXP":101,"comparison_operator":102,">=":103,">":104,"<=":105,"<":106,"<>":107,"!=":108,"sub_query_data_set_opt":109,"ANY":110,"boolean_primary":111,"IS":112,"boolean_extra":113,"UNKNOWN":114,"&&":115,"||":116,"OR":117,"XOR":118,"where_opt":119,"WHERE":120,"group_by_opt":121,"group_by":122,"roll_up_opt":123,"WITH":124,"ROLLUP":125,"GROUP_BY":126,"group_by_order_by_item_list":127,"order_by_opt":128,"order_by":129,"ORDER_BY":130,"group_by_order_by_item":131,"sort_opt":132,"ASC":133,"DESC":134,"having_opt":135,"HAVING":136,"limit":137,"OFFSET":138,"limit_opt":139,"procedure_opt":140,"procedure":141,"PROCEDURE":142,"for_update_lock_in_share_mode_opt":143,"FOR":144,"UPDATE":145,"LOCK":146,"SHARE":147,"MODE":148,"FROM":149,"table_refrences":150,"partitionOpt":151,"escaped_table_reference":152,"table_reference":153,"OJ":154,"join_inner_cross":155,"INNER":156,"CROSS":157,"left_right":158,"LEFT":159,"RIGHT":160,"out_opt":161,"OUTER":162,"left_right_out_opt":163,"join_table":164,"JOIN":165,"table_factor":166,"join_condition":167,"on_join_condition":168,"NATURAL":169,"join_condition_opt":170,"ON":171,"USING":172,"partition_names":173,"PARTITION":174,"aliasOpt":175,"index_or_key":176,"INDEX":177,"KEY":178,"for_opt":179,"index_name":180,"index_list":181,"index_list_opt":182,"index_hint_list_opt":183,"index_hint_list":184,"index_hint":185,"USE":186,"IGNORE":187,"FORCE":188,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"SELECT",18:"ALL",19:"DISTINCT",20:"DISTINCTROW",21:"HIGH_PRIORITY",22:"MAX_STATEMENT_TIME",23:"=",24:"NUMERIC",25:"STRAIGHT_JOIN",26:"SQL_SMALL_RESULT",27:"SQL_BIG_RESULT",28:"SQL_BUFFER_RESULT",29:"SQL_CACHE",30:"SQL_NO_CACHE",31:"SQL_CALC_FOUND_ROWS",32:",",34:"*",35:"SELECT_EXPR_STAR",38:"AS",39:"IDENTIFIER",41:"QUOTED_IDENTIFIER",42:"STRING",44:"EXPONENT_NUMERIC",45:"HEX_NUMERIC",47:"TRUE",48:"FALSE",50:"NULL",53:"(",55:")",58:"DOT",62:"WHEN",63:"THEN",65:"ELSE",67:"CASE",68:"END",70:"+",72:"-",73:"~",74:"!",75:"BINARY",77:"ROW",78:"EXISTS",79:"{",80:"}",82:"|",83:"&",84:"<<",85:">>",86:"/",87:"DIV",88:"MOD",89:"%",90:"^",92:"NOT",94:"ESCAPE",96:"IN",97:"BETWEEN",98:"AND",99:"SOUNDS",100:"LIKE",101:"REGEXP",103:">=",104:">",105:"<=",106:"<",107:"<>",108:"!=",110:"ANY",112:"IS",114:"UNKNOWN",115:"&&",116:"||",117:"OR",118:"XOR",120:"WHERE",124:"WITH",125:"ROLLUP",126:"GROUP_BY",130:"ORDER_BY",133:"ASC",134:"DESC",136:"HAVING",138:"OFFSET",142:"PROCEDURE",144:"FOR",145:"UPDATE",146:"LOCK",147:"SHARE",148:"MODE",149:"FROM",154:"OJ",156:"INNER",157:"CROSS",159:"LEFT",160:"RIGHT",162:"OUTER",165:"JOIN",169:"NATURAL",171:"ON",172:"USING",174:"PARTITION",177:"INDEX",178:"KEY",186:"USE",187:"IGNORE",188:"FORCE"},
productions_: [0,[3,2],[4,12],[7,1],[7,1],[7,1],[7,0],[8,1],[8,0],[9,3],[9,0],[10,1],[10,0],[11,1],[11,0],[12,1],[12,0],[13,1],[13,0],[14,0],[14,1],[14,1],[15,1],[15,0],[16,3],[16,1],[33,1],[33,1],[33,2],[37,0],[37,2],[37,1],[40,1],[40,1],[43,1],[43,1],[43,1],[46,1],[46,1],[49,1],[51,1],[51,1],[51,1],[51,1],[52,4],[54,3],[54,1],[56,0],[56,1],[56,1],[56,2],[56,1],[57,1],[57,3],[59,1],[59,3],[60,0],[60,1],[61,4],[61,5],[64,0],[64,2],[66,5],[69,2],[69,2],[69,2],[69,2],[69,2],[71,1],[71,1],[71,1],[71,1],[71,3],[71,4],[71,3],[71,4],[71,4],[71,1],[81,1],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[91,0],[91,1],[93,0],[93,2],[95,1],[95,6],[95,6],[95,6],[95,4],[95,5],[95,4],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[109,1],[109,1],[111,1],[111,4],[111,3],[111,6],[113,1],[113,1],[36,1],[36,4],[36,2],[36,3],[36,3],[36,3],[36,3],[36,3],[76,1],[76,3],[119,0],[119,2],[121,0],[121,1],[123,0],[123,2],[122,3],[128,0],[128,1],[129,3],[127,1],[127,3],[131,2],[132,0],[132,1],[132,1],[135,0],[135,2],[137,1],[137,3],[137,3],[139,0],[139,1],[140,0],[140,1],[141,2],[143,0],[143,2],[143,4],[17,0],[17,10],[150,1],[150,3],[152,1],[152,4],[155,0],[155,1],[155,1],[158,1],[158,1],[161,0],[161,1],[163,0],[163,2],[164,4],[164,5],[164,4],[164,6],[164,5],[170,0],[170,1],[168,2],[167,1],[167,4],[153,1],[153,1],[173,1],[173,3],[151,0],[151,4],[175,0],[175,2],[175,1],[176,1],[176,1],[179,0],[179,2],[179,2],[179,2],[180,1],[181,1],[181,3],[182,0],[182,1],[183,0],[183,1],[184,1],[184,3],[185,6],[185,6],[185,6],[166,4],[166,4],[166,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return {nodeType: 'Main', value: $$[$0-1]}; 
break;
case 2:

        this.$ = {
          type: 'Select',
          distinctOpt: $$[$0-10],
          highPriorityOpt: $$[$0-9],
          maxStateMentTimeOpt: $$[$0-8],
          straightJoinOpt: $$[$0-7],
          sqlSmallResultOpt: $$[$0-6],
          sqlBigResultOpt: $$[$0-5],
          sqlBufferResultOpt: $$[$0-4],
          sqlCacheOpt: $$[$0-3],
          sqlCalcFoundRowsOpt: $$[$0-2],
          selectItems: $$[$0-1],
          from: $$[$0].from,
          partition: $$[$0].partition,
          where: $$[$0].where,
          groupBy: $$[$0].groupBy,
          having: $$[$0].having,
          orderBy: $$[$0].orderBy,
          limit: $$[$0].limit,
          procedure: $$[$0].procedure,
          updateLockMode: $$[$0].updateLockMode
        }
      
break;
case 3: case 4: case 5: case 7: case 9: case 11: case 13: case 15: case 17: case 20: case 21: case 22: case 40: case 41: case 42: case 43: case 48: case 49: case 51: case 57: case 61: case 68: case 69: case 70: case 71: case 77: case 78: case 94: case 95: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 115: case 117: case 128: case 130: case 135: case 141: case 142: case 144: case 149: case 151: case 152: case 163: case 164: case 165: case 166: case 168: case 177: case 179: case 181: case 182: case 190: case 191: case 196: case 200: case 202:
 this.$ = $$[$0] 
break;
case 6: case 8: case 10: case 12: case 14: case 16: case 18: case 19: case 23: case 47: case 56: case 60: case 93: case 127: case 129: case 131: case 134: case 140: case 143: case 148: case 150: case 153: case 162: case 167: case 176: case 185: case 192: case 199: case 201:
 this.$ = null 
break;
case 24:
 $$[$0-2].value.push($$[$0]); 
break;
case 25:
 this.$ = { type: 'SelectExpr', value: [ $$[$0] ] } 
break;
case 26: case 27:
 this.$ = { value: $$[$0] } 
break;
case 28:
 this.$ = $$[$0-1]; this.$.alias = $$[$0].alias; this.$.hasAs = $$[$0].hasAs; 
break;
case 29: case 187:
 this.$ = {alias: null, hasAs: null} 
break;
case 30:
 this.$ = {alias: $$[$0], hasAs: true} 
break;
case 31:
 this.$ = {alias: $$[$0], hasAs: false} 
break;
case 32: case 33:
 this.$ = { type: 'String', value: $$[$0] } 
break;
case 34: case 35: case 36:
 this.$ = { type: 'Number', value: $$[$0] } 
break;
case 37:
 this.$ = { type: 'Boolean', value: 'TRUE' } 
break;
case 38:
 this.$ = { type: 'Boolean', value: 'FALSE' } 
break;
case 39:
 this.$ = { type: 'Null', value: 'null' } 
break;
case 44:
 this.$ = {type: 'FunctionCall', name: $$[$0-3], params: $$[$0-1]} 
break;
case 45:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 46:
 this.$ = [$$[$0]]; 
break;
case 50:
 this.$ = { type: 'FunctionCallParam', distinctOpt: $$[$0-1], value: $$[$0] } 
break;
case 52:
 this.$ = { type: 'Identifier', value: $$[$0] } 
break;
case 53:
 this.$ = $$[$0-2]; $$[$0-2].value += '.' + $$[$0] 
break;
case 54:
 this.$ = { type: 'IdentifierList', value: [ $$[$0] ] } 
break;
case 55: case 159:
 this.$ = $$[$0-2]; $$[$0-2].value.push($$[$0]); 
break;
case 58:
 this.$ = { type: 'WhenThenList', value: [ { when: $$[$0-2], then: $$[$0] } ] }; 
break;
case 59:
 this.$ = $$[$0-4]; this.$.value.push({ when: $$[$0-2], then: $$[$0] }); 
break;
case 62:
 this.$ = { type: 'CaseWhen', caseExpr: $$[$0-3], whenThenList: $$[$0-2], else: $$[$0-1] } 
break;
case 63: case 64: case 65: case 66: case 67:
 this.$ = $$[$0]; if (!this.$.prefix) this.$.prefix = [ $$[$0-1] ]; else this.$.prefix.push($$[$0-1]); 
break;
case 72:
 this.$ = $$[$0-1]; this.$.hasParentheses = true; 
break;
case 73:
 this.$ = $$[$0-1]; this.$.hasParentheses = true; this.$.hasRow = true; 
break;
case 74:
 this.$ = { type: 'SubQuery', value: $$[$0-1] } 
break;
case 75:
 this.$ = { type: 'ExistsSubQuery', value: $$[$0-1] } 
break;
case 76:
 this.$ = { type: 'IdentifierExpr', identifier: $$[$0-2], value: $$[$0-1] } 
break;
case 79:
 this.$ = { type: 'BitExpression', operator: '|', left: $$[$0-2], right: $$[$0] } 
break;
case 80:
 this.$ = { type: 'BitExpression', operator: '&', left: $$[$0-2], right: $$[$0] } 
break;
case 81:
 this.$ = { type: 'BitExpression', operator: '<<', left: $$[$0-2], right: $$[$0] } 
break;
case 82:
 this.$ = { type: 'BitExpression', operator: '>>', left: $$[$0-2], right: $$[$0] } 
break;
case 83:
 this.$ = { type: 'BitExpression', operator: '+', left: $$[$0-2], right: $$[$0] } 
break;
case 84:
 this.$ = { type: 'BitExpression', operator: '-', left: $$[$0-2], right: $$[$0] } 
break;
case 85:
 this.$ = { type: 'BitExpression', operator: '*', left: $$[$0-2], right: $$[$0] } 
break;
case 86:
 this.$ = { type: 'BitExpression', operator: '/', left: $$[$0-2], right: $$[$0] } 
break;
case 87:
 this.$ = { type: 'BitExpression', operator: 'DIV', left: $$[$0-2], right: $$[$0] } 
break;
case 88:
 this.$ = { type: 'BitExpression', operator: 'MOD', left: $$[$0-2], right: $$[$0] } 
break;
case 89:
 this.$ = { type: 'BitExpression', operator: '%', left: $$[$0-2], right: $$[$0] } 
break;
case 90:
 this.$ = { type: 'BitExpression', operator: '^', left: $$[$0-2], right: $$[$0] } 
break;
case 91:
 this.$ = false 
break;
case 92: case 132:
 this.$ = true 
break;
case 96:
 this.$ = { type: 'InSubQueryPredicate', hasNot: $$[$0-4], left: $$[$0-5] ,right: $$[$0-1] } 
break;
case 97:
 this.$ = { type: 'InExpressionListPredicate', hasNot: $$[$0-4], left: $$[$0-5], right: $$[$0-1] } 
break;
case 98:
 this.$ = { type: 'BetweenPredicate', hasNot: $$[$0-4], left: $$[$0-5], right: { left: $$[$0-3], right: $$[$0-1] } } 
break;
case 99:
 this.$ = { type: 'SoundsLikePredicate', hasNot: false, left: $$[$0-3], right: $$[$0] } 
break;
case 100:
 this.$ = { type: 'LikePredicate', hasNot: $$[$0-3], left: $$[$0-4], right: $$[$0-1], escape: $$[$0] } 
break;
case 101:
 this.$ = { type: 'RegexpPredicate', hasNot: $$[$0-2], left: $$[$0-3], right: $$[$0] } 
break;
case 112:
 this.$ = { type: 'IsNullBooleanPrimary', hasNot: $$[$0-1] , value: $$[$0-3] } 
break;
case 113:
 this.$ = { type: 'ComparisonBooleanPrimary', left: $$[$0-2], operator: $$[$0-1], right: $$[$0] } 
break;
case 114:
 this.$ = { type: 'ComparisonSubQueryBooleanPrimary', operator: $$[$0-4], subQueryOpt: $$[$0-3], left: $$[$0-5], right: $$[$0-1] } 
break;
case 116:
 this.$ = { type: 'BooleanExtra', value: $$[$0] } 
break;
case 118:
 this.$ = { type: 'IsExpression', hasNot: $$[$0-1], left: $$[$0-3], right: $$[$0] } 
break;
case 119:
 this.$ = { type: 'NotExpression', value: $$[$0] } 
break;
case 120: case 123:
 this.$ = { type: 'AndExpression', operator: $$[$0-1], left: $$[$0-2], right: $$[$0] } 
break;
case 121: case 122:
 this.$ = { type: 'OrExpression', operator: $$[$0-1], left: $$[$0-2], right: $$[$0] } 
break;
case 124:
 this.$ = { type: 'XORExpression', left: $$[$0-2], right: $$[$0] } 
break;
case 125:
 this.$ = { type: 'ExpressionList', value: [ $$[$0] ] } 
break;
case 126: case 198: case 204:
 this.$ = $$[$0-2]; this.$.value.push($$[$0]); 
break;
case 133: case 136:
 this.$ = { type: 'GroupBy', value: $$[$0-1], rollUp: $$[$0] } 
break;
case 137:
 this.$ = [ $$[$0] ] 
break;
case 138:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 139:
 this.$ = { type: 'GroupByOrderByItem', value: $$[$0-1], sortOpt: $$[$0] } 
break;
case 145:
 this.$ = { type: 'LIMIT', value: [ $$[$0] ] } 
break;
case 146:
 this.$ = { type: 'LIMIT', value: [ $$[$0-2], $$[$0] ] } 
break;
case 147:
 this.$ = { type: 'LIMIT', value: [ $$[$0], $$[$0-2] ], offsetMode: true } 
break;
case 154:
 this.$ = $$[$0-1] + ' ' + $$[$0] 
break;
case 155:
 this.$ = $$[$0-3] + ' ' + $$[$0-2] + ' ' + $$[$0-1] + ' ' + $$[$0] 
break;
case 156:
 this.$ = {} 
break;
case 157:
 this.$ = { from: $$[$0-8], partition: $$[$0-7], where: $$[$0-6], groupBy: $$[$0-5], having: $$[$0-4], orderBy: $$[$0-3], limit: $$[$0-2], procedure: $$[$0-1], updateLockMode: $$[$0] } 
break;
case 158:
 this.$ = { type: 'TableRefrences', value: [ $$[$0] ] } 
break;
case 160:
 this.$ = { type: 'TableRefrence', value: $$[$0] } 
break;
case 161:
 this.$ = { type: 'TableRefrence', hasOj: true, value: $$[$0-1] } 
break;
case 169:
 this.$ = { leftRight: null, outOpt: null } 
break;
case 170:
 this.$ = { leftRight: $$[$0-1], outOpt: $$[$0] } 
break;
case 171:
 this.$ = { type: 'InnerCrossJoinTable', innerCross: $$[$0-2], left: $$[$0-3], right: $$[$0], condition: $$[$01] } 
break;
case 172:
 this.$ = { type: 'InnerCrossJoinTable', innerCross: $$[$0-3], left: $$[$0-4], right: $$[$0-1], condition: $$[$0] } 
break;
case 173:
 this.$ = { type: 'StraightJoinTable', left: $$[$0-3], right: $$[$0-1], condition: $$[$0] } 
break;
case 174:
 this.$ = { type: 'LeftRightJoinTable', leftRight: $$[$0-4], outOpt: $$[$0-3], left: $$[$0-5], right: $$[$0-1], condition: $$[$0] } 
break;
case 175:
 this.$ = { type: 'NaturalJoinTable', leftRight: $$[$0-2].leftRight, outOpt: $$[$0-2].outOpt, left: $$[$0-4], right: $$[$0] } 
break;
case 178:
 this.$ = { type: 'OnJoinCondition', value: $$[$0] } 
break;
case 180:
 this.$ = { type: 'UsingJoinCondition', value: $$[$0-1] } 
break;
case 183:
 this.$ = { type: 'Partitions', value: [ $$[$0] ] } 
break;
case 184:
 this.$ = $$[$0-2]; $$[$0-2].value.push($$[$0]) 
break;
case 186:
 this.$ = $$[$0-1] 
break;
case 188:
 this.$ = { hasAs: true, alias: $$[$0] } 
break;
case 189:
 this.$ = { hasAs: false, alias: $$[$0] } 
break;
case 193: case 194: case 195:
 this.$ = { type: 'ForOptIndexHint', value: $$[$0] } 
break;
case 197:
 this.$ = { type: 'IndexList', value: [ $$[$0] ] } 
break;
case 203:
 this.$ = { type: 'IndexHintList', value: [ $$[$0] ] } 
break;
case 205:
 this.$ = { type: 'UseIndexHint', value: $$[$0-1], forOpt: $$[$0-3], indexOrKey: $$[$0-4] } 
break;
case 206:
 this.$ = { type: 'IgnoreIndexHint', value: $$[$0-1], forOpt: $$[$0-3], indexOrKey: $$[$0-4] } 
break;
case 207:
 this.$ = { type: 'ForceIndexHint', value: $$[$0-1], forOpt: $$[$0-3], indexOrKey: $$[$0-4] } 
break;
case 208:
 this.$ = { type: 'TableFactor', value: $$[$0-3], partition: $$[$0-2], alias: $$[$0-1].alias, hasAs: $$[$0-1].hasAs } 
break;
case 209:
 this.$ = { type: 'SubQuery', value: $$[$0-2], alias: $$[$0].alias, hasAs: $$[$0].hasAs } 
break;
case 210:
 this.$ = $$[$0-1]; this.$.hasParentheses = true 
break;
}
},
table: [{3:1,4:2,6:$V0},{1:[3]},{5:[1,4]},o($V1,[2,6],{7:5,18:[1,6],19:[1,7],20:[1,8]}),{1:[2,1]},o($V2,[2,8],{8:9,21:[1,10]}),o($V1,[2,3]),o($V1,[2,4]),o($V1,[2,5]),o($V3,[2,10],{9:11,22:[1,12]}),o($V2,[2,7]),o($V4,[2,12],{10:13,25:[1,14]}),{23:[1,15]},o($V5,[2,14],{11:16,26:[1,17]}),o($V4,[2,11]),{24:[1,18]},o($V6,[2,16],{12:19,27:[1,20]}),o($V5,[2,13]),o($V3,[2,9]),o($V7,[2,18],{13:21,28:[1,22]}),o($V6,[2,15]),o($V8,[2,19],{14:23,29:[1,24],30:[1,25]}),o($V7,[2,17]),o($V9,[2,23],{15:26,31:[1,27]}),o($V8,[2,20]),o($V8,[2,21]),{16:28,24:$Va,33:29,34:$Vb,35:$Vc,36:32,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,81:36,92:$Vv,95:35,111:33},o($V9,[2,22]),o($Vw,[2,156],{17:66,32:[1,67],149:[1,68]}),o($Vx,[2,25]),o($Vx,[2,26]),o($Vx,[2,27]),o($Vx,[2,29],{37:69,38:[1,75],39:[1,76],98:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC}),o($VD,[2,117],{102:78,23:[1,79],103:[1,80],104:[1,81],105:[1,82],106:[1,83],107:[1,84],108:[1,85],112:[1,77]}),{24:$Va,36:86,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,81:36,92:$Vv,95:35,111:33},o($VE,[2,111]),o($VE,[2,95],{91:87,34:$VF,70:$VG,72:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,90:$VQ,92:$VR,96:$VS,97:$VS,100:$VS,101:$VS,99:[1,88]}),o($VT,[2,78]),o($VU,[2,68]),o($VU,[2,69],{58:$VV}),o($VU,[2,70]),o($VU,[2,71]),{4:104,6:$V0,24:$Va,36:105,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:103,77:$Vs,78:$Vt,79:$Vu,81:36,92:$Vv,95:35,111:33},{53:[1,106]},{53:[1,107]},{39:$VW,57:108},o($VU,[2,77]),o($VU,[2,40]),o($VU,[2,41]),o($VU,[2,42]),o($VU,[2,43]),o([5,23,24,25,32,34,38,39,55,58,62,63,65,68,70,72,80,82,83,84,85,86,87,88,89,90,92,94,96,97,98,99,100,101,103,104,105,106,107,108,112,115,116,117,118,120,124,126,130,133,134,136,142,144,146,149,156,157,159,160,165,169,171,172,174],$VX,{53:$VY}),{24:$Va,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:111,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu},{24:$Va,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:112,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu},{24:$Va,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:113,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu},{24:$Va,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:114,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu},{24:$Va,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:115,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu},{24:$Va,36:117,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,60:116,62:[2,56],66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,81:36,92:$Vv,95:35,111:33},o($VU,[2,32]),o($VU,[2,33]),o($VU,[2,34]),o($VU,[2,35]),o($VU,[2,36]),o($VU,[2,37]),o($VU,[2,38]),o($VU,[2,39]),o($Vw,[2,2]),{24:$Va,33:118,34:$Vb,35:$Vc,36:32,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,81:36,92:$Vv,95:35,111:33},{39:$VW,53:$VZ,57:125,79:$V_,150:119,152:120,153:121,164:124,166:123},o($Vx,[2,28]),{24:$Va,36:127,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,81:36,92:$Vv,95:35,111:33},{24:$Va,36:128,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,81:36,92:$Vv,95:35,111:33},{24:$Va,36:129,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,81:36,92:$Vv,95:35,111:33},{24:$Va,36:130,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,81:36,92:$Vv,95:35,111:33},{24:$Va,36:131,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,81:36,92:$Vv,95:35,111:33},{39:[1,132]},o($Vx,[2,31]),o([47,48,50,114],$VS,{91:133,92:$VR}),{18:[1,136],24:$Va,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,81:36,95:134,109:135,110:[1,137]},o($V$,[2,102]),o($V$,[2,103]),o($V$,[2,104]),o($V$,[2,105]),o($V$,[2,106]),o($V$,[2,107]),o($V$,[2,108]),o($VD,[2,119]),{96:[1,138],97:[1,139],100:[1,140],101:[1,141]},{100:[1,142]},{24:$Va,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,81:143},{24:$Va,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,81:144},{24:$Va,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,81:145},{24:$Va,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,81:146},{24:$Va,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,81:147},{24:$Va,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,81:148},{24:$Va,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,81:149},{24:$Va,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,81:150},{24:$Va,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,81:151},{24:$Va,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,81:152},{24:$Va,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,81:153},{24:$Va,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,81:154},o([47,48,50,96,97,100,101,114],[2,92]),{39:[1,155]},{32:$V01,55:[1,156]},{55:[1,158]},o($V11,[2,125],{98:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC}),{24:$Va,36:105,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:159,77:$Vs,78:$Vt,79:$Vu,81:36,92:$Vv,95:35,111:33},{4:160,6:$V0},{24:$Va,36:161,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,58:$VV,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,81:36,92:$Vv,95:35,111:33},o([5,24,25,32,38,39,41,42,44,45,47,48,50,53,55,58,67,70,72,73,74,75,77,78,79,80,92,120,126,130,136,142,144,146,156,157,159,160,165,169,171,172,174,186,187,188],$VX),o($V11,$V21,{111:33,95:35,81:36,71:37,51:38,57:39,52:40,69:41,66:46,40:47,43:48,46:49,49:50,54:162,56:163,36:167,19:$V31,24:$Va,34:$V41,35:$V51,39:$Vd,41:$Ve,42:$Vf,44:$Vg,45:$Vh,47:$Vi,48:$Vj,50:$Vk,53:$Vl,67:$Vm,70:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,92:$Vv}),o($VU,[2,63]),o($VU,[2,64]),o($VU,[2,65]),o($VU,[2,66]),o($VU,[2,67]),{61:168,62:[1,169]},{62:[2,57],98:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($Vx,[2,24]),o([5,24,55,120,126,130,136,142,144,146],$V61,{151:170,32:$V71,174:$V81}),o($V91,[2,158]),o($V91,[2,160],{155:173,158:175,25:$Va1,156:$Vb1,157:$Vc1,159:$Vd1,160:$Ve1,165:$Vf1,169:$Vg1}),{154:[1,181]},o($Vh1,[2,181]),o($Vh1,[2,182]),o([5,24,25,32,38,39,55,80,120,126,130,136,142,144,146,156,157,159,160,165,169,171,172,186,187,188],$V61,{151:182,58:$VV,174:$V81}),{4:183,6:$V0,39:$VW,53:$VZ,57:125,79:$V_,150:184,152:120,153:121,164:124,166:123},o($VD,[2,120]),o($Vi1,[2,121],{98:$Vy,115:$Vz}),o($Vi1,[2,122],{98:$Vy,115:$Vz}),o($VD,[2,123]),o($Vi1,[2,124],{98:$Vy,115:$Vz}),o($Vx,[2,30]),{46:187,47:$Vi,48:$Vj,50:[1,186],113:185,114:[1,188]},o($VE,[2,113]),{53:[1,189]},{53:[2,109]},{53:[2,110]},{53:[1,190]},{24:$Va,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,81:191},{24:$Va,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:192,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu},{24:$Va,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,81:193},{24:$Va,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,81:194},o([5,23,24,25,32,38,39,55,62,63,65,68,80,82,92,96,97,98,99,100,101,103,104,105,106,107,108,112,115,116,117,118,120,124,126,130,133,134,136,142,144,146,149,156,157,159,160,165,169,171,172,174],[2,79],{34:$VF,70:$VG,72:$VH,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,90:$VQ}),o([5,23,24,25,32,38,39,55,62,63,65,68,80,82,83,90,92,96,97,98,99,100,101,103,104,105,106,107,108,112,115,116,117,118,120,124,126,130,133,134,136,142,144,146,149,156,157,159,160,165,169,171,172,174],[2,80],{34:$VF,70:$VG,72:$VH,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP}),o($Vj1,[2,81],{34:$VF,70:$VG,72:$VH,86:$VM,87:$VN,88:$VO,89:$VP}),o($Vj1,[2,82],{34:$VF,70:$VG,72:$VH,86:$VM,87:$VN,88:$VO,89:$VP}),o($Vk1,[2,83],{34:$VF,86:$VM,87:$VN,88:$VO,89:$VP}),o($Vk1,[2,84],{34:$VF,86:$VM,87:$VN,88:$VO,89:$VP}),o($VT,[2,85]),o($VT,[2,86]),o($VT,[2,87]),o($VT,[2,88]),o($VT,[2,89]),o([5,23,24,25,32,38,39,55,62,63,65,68,80,82,90,92,96,97,98,99,100,101,103,104,105,106,107,108,112,115,116,117,118,120,124,126,130,133,134,136,142,144,146,149,156,157,159,160,165,169,171,172,174],[2,90],{34:$VF,70:$VG,72:$VH,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP}),o([5,23,24,25,32,34,38,39,41,42,44,45,47,48,50,53,55,58,62,63,65,67,68,70,72,73,74,75,77,78,79,80,82,83,84,85,86,87,88,89,90,92,94,96,97,98,99,100,101,103,104,105,106,107,108,112,115,116,117,118,120,124,126,130,133,134,136,142,144,146,149,156,157,159,160,165,169,171,172,174,186,187,188],[2,53]),o($VU,[2,72]),{24:$Va,36:195,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,81:36,92:$Vv,95:35,111:33},o($VU,[2,74]),{32:$V01,55:[1,196]},{55:[1,197]},{80:[1,198],98:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{32:[1,200],55:[1,199]},o($V11,[2,46]),o($V11,[2,48]),o($V11,[2,49]),{24:$Va,36:201,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,81:36,92:$Vv,95:35,111:33},o($V11,[2,51],{98:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC}),{62:[1,203],64:202,65:[1,204],68:[2,60]},{24:$Va,36:205,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,81:36,92:$Vv,95:35,111:33},o($Vl1,[2,127],{119:206,120:[1,207]}),{39:$VW,53:$VZ,57:125,79:$V_,152:208,153:121,164:124,166:123},{53:[1,209]},{165:[1,210]},{39:$VW,53:$VZ,57:125,166:211},{161:212,162:$Vm1,165:$Vn1},{158:215,159:$Vd1,160:$Ve1,163:214,165:[2,169]},{165:[2,163]},{165:[2,164]},o($Vo1,[2,165]),o($Vo1,[2,166]),{39:$VW,53:$VZ,57:125,153:216,164:124,166:123},o($Vp1,$Vq1,{175:217,57:219,38:$Vr1,39:$VW}),{55:[1,220]},{32:$V71,55:[1,221]},o($VD,[2,118]),o($VE,[2,112]),o($VD,[2,115]),o($VD,[2,116]),{4:222,6:$V0},{4:223,6:$V0,24:$Va,36:105,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:224,77:$Vs,78:$Vt,79:$Vu,81:36,92:$Vv,95:35,111:33},{34:$VF,70:$VG,72:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,90:$VQ,98:[1,225]},o($VE,[2,93],{93:226,94:[1,227]}),o($VE,[2,101],{34:$VF,70:$VG,72:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,90:$VQ}),o($VE,[2,99],{34:$VF,70:$VG,72:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,90:$VQ}),o($V11,[2,126],{98:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC}),o($VU,[2,73]),o($VU,[2,75]),o($VU,[2,76]),o($VU,[2,44]),o($V11,$V21,{111:33,95:35,81:36,71:37,51:38,57:39,52:40,69:41,66:46,40:47,43:48,46:49,49:50,36:167,56:228,19:$V31,24:$Va,34:$V41,35:$V51,39:$Vd,41:$Ve,42:$Vf,44:$Vg,45:$Vh,47:$Vi,48:$Vj,50:$Vk,53:$Vl,67:$Vm,70:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,92:$Vv}),o($V11,[2,50],{98:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC}),{68:[1,229]},{24:$Va,36:230,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,81:36,92:$Vv,95:35,111:33},{24:$Va,36:231,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,81:36,92:$Vv,95:35,111:33},{63:[1,232],98:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($Vs1,[2,129],{121:233,122:234,126:[1,235]}),{24:$Va,36:236,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,81:36,92:$Vv,95:35,111:33},o($V91,[2,159]),{39:$VW,57:238,173:237},{39:$VW,53:$VZ,57:125,166:239},{168:240,171:$Vt1},{165:[1,242]},{165:[2,168]},{165:[1,243]},{161:244,162:$Vm1,165:$Vn1},{25:$Va1,80:[1,245],155:173,156:$Vb1,157:$Vc1,158:175,159:$Vd1,160:$Ve1,165:$Vf1,169:$Vg1},o($Vh1,[2,201],{183:246,184:247,185:248,186:$Vu1,187:$Vv1,188:$Vw1}),{39:$VW,57:252},o($Vp1,[2,189],{58:$VV}),o($Vh1,$Vq1,{57:219,175:253,38:$Vr1,39:$VW}),o($Vh1,[2,210]),{55:[1,254]},{55:[1,255]},{32:$V01,55:[1,256]},{24:$Va,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,81:36,95:257},o($VE,[2,100]),{24:$Va,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:258,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu},o($V11,[2,45]),o($VU,[2,62]),{63:[1,259],98:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{68:[2,61],98:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{24:$Va,36:260,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,81:36,92:$Vv,95:35,111:33},o($Vx1,[2,143],{135:261,136:[1,262]}),o($Vs1,[2,130]),{24:$Va,36:265,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,81:36,92:$Vv,95:35,111:33,127:263,131:264},o($Vl1,[2,128],{98:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC}),{32:[1,267],55:[1,266]},o($V11,[2,183],{58:$VV}),o([5,24,25,32,55,80,120,126,130,136,142,144,146,156,157,159,160,165,169,174],[2,171],{167:268,168:269,171:$Vt1,172:$Vy1}),o($Vh1,[2,173]),{24:$Va,36:271,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,81:36,92:$Vv,95:35,111:33},{39:$VW,53:$VZ,57:125,153:272,164:124,166:123},{39:$VW,53:$VZ,57:125,166:273},{165:[2,170]},o($V91,[2,161]),o($Vh1,[2,208]),o($Vh1,[2,202]),o($Vh1,[2,203]),{176:275,177:$Vz1,178:$VA1},{176:278,177:$Vz1,178:$VA1},{176:279,177:$Vz1,178:$VA1},o($Vp1,[2,188],{58:$VV}),o($Vh1,[2,209]),o($VE,[2,114]),o($VE,[2,96]),o($VE,[2,97]),o($VE,[2,98]),o($VE,[2,94]),{24:$Va,36:280,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,81:36,92:$Vv,95:35,111:33},o($VB1,[2,58],{98:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC}),o($VC1,[2,134],{128:281,129:282,130:[1,283]}),{24:$Va,36:284,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,81:36,92:$Vv,95:35,111:33},o($Vs1,$VD1,{123:285,32:$VE1,124:$VF1}),o($VG1,[2,137]),o($VG1,[2,140],{132:288,98:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC,133:[1,289],134:[1,290]}),o([5,24,25,32,38,39,55,80,120,126,130,136,142,144,146,156,157,159,160,165,169,171,172,174,186,187,188],[2,186]),{39:$VW,57:291},o($Vh1,[2,172]),o($Vh1,[2,179]),{53:[1,292]},o($Vh1,[2,178],{98:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC}),{25:$Va1,155:173,156:$Vb1,157:$Vc1,158:175,159:$Vd1,160:$Ve1,165:$Vf1,167:293,168:269,169:$Vg1,171:$Vt1,172:$Vy1},o($Vh1,[2,175]),{185:294,186:$Vu1,187:$Vv1,188:$Vw1},{53:$VH1,144:$VI1,179:295},o($VJ1,[2,190]),o($VJ1,[2,191]),{53:$VH1,144:$VI1,179:297},{53:$VH1,144:$VI1,179:298},o($VB1,[2,59],{98:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC}),o($VK1,[2,148],{139:299,137:300,24:[1,301]}),o($VC1,[2,135]),{24:$Va,36:265,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,81:36,92:$Vv,95:35,111:33,127:302,131:264},o($Vx1,[2,144],{98:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC}),o($Vs1,[2,133]),{24:$Va,36:265,39:$Vd,40:47,41:$Ve,42:$Vf,43:48,44:$Vg,45:$Vh,46:49,47:$Vi,48:$Vj,49:50,50:$Vk,51:38,52:40,53:$Vl,57:39,66:46,67:$Vm,69:41,70:$Vn,71:37,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,78:$Vt,79:$Vu,81:36,92:$Vv,95:35,111:33,131:303},{125:[1,304]},o($VG1,[2,139]),o($VG1,[2,141]),o($VG1,[2,142]),o($V11,[2,184],{58:$VV}),{39:$VW,57:306,59:305},o($Vh1,[2,174]),o($Vh1,[2,204]),{53:[1,307]},{126:[1,310],130:[1,309],165:[1,308]},{53:[1,311]},{53:[1,312]},o($VL1,[2,150],{140:313,141:314,142:[1,315]}),o($VK1,[2,149]),o($VK1,[2,145],{32:[1,316],138:[1,317]}),o($VC1,$VD1,{123:318,32:$VE1,124:$VF1}),o($VG1,[2,138]),o($Vs1,[2,132]),{32:[1,320],55:[1,319]},o($V11,[2,54],{58:$VV}),{39:$VW,55:[2,199],57:324,180:323,181:322,182:321},{53:[2,193]},{53:[2,194]},{53:[2,195]},{39:$VW,57:324,180:323,181:325},{39:$VW,57:324,180:323,181:326},o($Vw,[2,153],{143:327,144:[1,328],146:[1,329]}),o($VL1,[2,151]),{39:[1,331],52:330},{24:[1,332]},{24:[1,333]},o($VC1,[2,136]),o($Vh1,[2,180]),{39:$VW,57:334},{55:[1,335]},{32:$VM1,55:[2,200]},o($V11,[2,197]),o($V11,[2,196],{58:$VV}),{32:$VM1,55:[1,337]},{32:$VM1,55:[1,338]},o($Vw,[2,157]),{145:[1,339]},{96:[1,340]},o($VL1,[2,152]),{53:$VY},o($VK1,[2,146]),o($VK1,[2,147]),o($V11,[2,55],{58:$VV}),o($Vh1,[2,205]),{39:$VW,57:324,180:341},o($Vh1,[2,206]),o($Vh1,[2,207]),o($Vw,[2,154]),{147:[1,342]},o($V11,[2,198]),{148:[1,343]},o($Vw,[2,155])],
defaultActions: {4:[2,1],136:[2,109],137:[2,110],177:[2,163],178:[2,164],213:[2,168],244:[2,170],308:[2,193],309:[2,194],310:[2,195]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:/* skip sql comments */
break;
case 2:/* skip sql comments */
break;
case 3:/* skip whitespace */
break;
case 4:return 39
break;
case 5:return 39
break;
case 6:return 6
break;
case 7:return 18
break;
case 8:return 110
break;
case 9:return 19
break;
case 10:return 20
break;
case 11:return 21
break;
case 12:return 22
break;
case 13:return 25
break;
case 14:return 26
break;
case 15:return 27
break;
case 16:return 28
break;
case 17:return 29
break;
case 18:return 30
break;
case 19:return 31
break;
case 20:return 35
break;
case 21:return 38
break;
case 22:return 47
break;
case 23:return 48
break;
case 24:return 50
break;
case 25:return 'COLLATE'
break;
case 26:return 75
break;
case 27:return 77
break;
case 28:return 78
break;
case 29:return 67
break;
case 30:return 62
break;
case 31:return 63
break;
case 32:return 65
break;
case 33:return 68
break;
case 34:return 87
break;
case 35:return 88
break;
case 36:return 92
break;
case 37:return 97
break;
case 38:return 96
break;
case 39:return 99
break;
case 40:return 100
break;
case 41:return 94
break;
case 42:return 101
break;
case 43:return 112
break;
case 44:return 114
break;
case 45:return 98
break;
case 46:return 117
break;
case 47:return 118
break;
case 48:return 149
break;
case 49:return 174
break;
case 50:return 186
break;
case 51:return 177
break;
case 52:return 178
break;
case 53:return 144
break;
case 54:return 165
break;
case 55:return 130
break;
case 56:return 126
break;
case 57:return 187
break;
case 58:return 188
break;
case 59:return 156
break;
case 60:return 157
break;
case 61:return 171
break;
case 62:return 172
break;
case 63:return 159
break;
case 64:return 160
break;
case 65:return 162
break;
case 66:return 169
break;
case 67:return 120
break;
case 68:return 133
break;
case 69:return 134
break;
case 70:return 124
break;
case 71:return 125
break;
case 72:return 136
break;
case 73:return 138
break;
case 74:return 142
break;
case 75:return 145
break;
case 76:return 146
break;
case 77:return 147
break;
case 78:return 148
break;
case 79:return 32
break;
case 80:return 23
break;
case 81:return 53
break;
case 82:return 55
break;
case 83:return 73
break;
case 84:return 74
break;
case 85:return 82
break;
case 86:return 83
break;
case 87:return 84
break;
case 88:return 85
break;
case 89:return 70
break;
case 90:return 72
break;
case 91:return 34
break;
case 92:return 86
break;
case 93:return 89
break;
case 94:return 90
break;
case 95:return 103
break;
case 96:return 104
break;
case 97:return 106
break;
case 98:return 105
break;
case 99:return 107
break;
case 100:return 108
break;
case 101:return '<=>'
break;
case 102:return 79
break;
case 103:return 80
break;
case 104:return 42
break;
case 105:return 42
break;
case 106:return 45
break;
case 107:return 24
break;
case 108:return 44
break;
case 109:return 39
break;
case 110:return 58
break;
case 111:return 41
break;
case 112:return 5
break;
case 113:return 'INVALID'
break;
}
},
rules: [/^(?:[\/][*](.|\n)*?[*][\/])/i,/^(?:[-][-]\s.*\n)/i,/^(?:[#]\s.*\n)/i,/^(?:\s+)/i,/^(?:[\w]+[\u4e00-\u9fa5]+[0-9a-zA-Z_\u4e00-\u9fa5]*)/i,/^(?:[\u4e00-\u9fa5][0-9a-zA-Z_\u4e00-\u9fa5]*)/i,/^(?:SELECT\b)/i,/^(?:ALL\b)/i,/^(?:ANY\b)/i,/^(?:DISTINCT\b)/i,/^(?:DISTINCTROW\b)/i,/^(?:HIGH_PRIORITY\b)/i,/^(?:MAX_STATEMENT_TIME\b)/i,/^(?:STRAIGHT_JOIN\b)/i,/^(?:SQL_SMALL_RESULT\b)/i,/^(?:SQL_BIG_RESULT\b)/i,/^(?:SQL_BUFFER_RESULT\b)/i,/^(?:SQL_CACHE\b)/i,/^(?:SQL_NO_CACHE\b)/i,/^(?:SQL_CALC_FOUND_ROWS\b)/i,/^(?:([a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]+\.){1,2}\*)/i,/^(?:AS\b)/i,/^(?:TRUE\b)/i,/^(?:FALSE\b)/i,/^(?:NULL\b)/i,/^(?:COLLATE\b)/i,/^(?:BINARY\b)/i,/^(?:ROW\b)/i,/^(?:EXISTS\b)/i,/^(?:CASE\b)/i,/^(?:WHEN\b)/i,/^(?:THEN\b)/i,/^(?:ELSE\b)/i,/^(?:END\b)/i,/^(?:DIV\b)/i,/^(?:MOD\b)/i,/^(?:NOT\b)/i,/^(?:BETWEEN\b)/i,/^(?:IN\b)/i,/^(?:SOUNDS\b)/i,/^(?:LIKE\b)/i,/^(?:ESCAPE\b)/i,/^(?:REGEXP\b)/i,/^(?:IS\b)/i,/^(?:UNKNOWN\b)/i,/^(?:AND\b)/i,/^(?:OR\b)/i,/^(?:XOR\b)/i,/^(?:FROM\b)/i,/^(?:PARTITION\b)/i,/^(?:USE\b)/i,/^(?:INDEX\b)/i,/^(?:KEY\b)/i,/^(?:FOR\b)/i,/^(?:JOIN\b)/i,/^(?:ORDER\s+BY\b)/i,/^(?:GROUP\s+BY\b)/i,/^(?:IGNORE\b)/i,/^(?:FORCE\b)/i,/^(?:INNER\b)/i,/^(?:CROSS\b)/i,/^(?:ON\b)/i,/^(?:USING\b)/i,/^(?:LEFT\b)/i,/^(?:RIGHT\b)/i,/^(?:OUTER\b)/i,/^(?:NATURAL\b)/i,/^(?:WHERE\b)/i,/^(?:ASC\b)/i,/^(?:DESC\b)/i,/^(?:WITH\b)/i,/^(?:ROLLUP\b)/i,/^(?:HAVING\b)/i,/^(?:OFFSET\b)/i,/^(?:PROCEDURE\b)/i,/^(?:UPDATE\b)/i,/^(?:LOCK\b)/i,/^(?:SHARE\b)/i,/^(?:MODE\b)/i,/^(?:,)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:~)/i,/^(?:!)/i,/^(?:\|)/i,/^(?:&)/i,/^(?:<<)/i,/^(?:>>)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:<=)/i,/^(?:<>)/i,/^(?:!=)/i,/^(?:<=>)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:['](\\.|[^'])*['])/i,/^(?:["](\\.|[^"])*["])/i,/^(?:[0][x][0-9a-fA-F]+)/i,/^(?:[-]?[0-9]+(\.[0-9]+)?)/i,/^(?:[-]?[0-9]+(\.[0-9]+)?[eE][-][0-9]+(\.[0-9]+)?)/i,/^(?:[a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]*)/i,/^(?:\.)/i,/^(?:['"][a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]*["'])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();if (!sqlParser) {
  sqlParser = {};
}

function Sql() {
  this.buffer = '';
}

sqlParser.stringify = function (ast) {
  var sql = new Sql();
  sql.strigifyMain(ast);
  return sql.buffer;
}

Sql.prototype.appendKeyword = function(keyword) {
  this.buffer += keyword.toUpperCase() + ' ';
}
Sql.prototype.append = function(word) {
  this.buffer += word + ' ';
}
Sql.prototype.strigifyMain = function(ast) {
  this.stringifySelectClause(ast.value);
}
Sql.prototype.stringifySelectClause = function(ast) {
  this.appendKeyword('select');
  if (ast.distinctOpt) {
    this.appendKeyword(ast.distinctOpt);
  }
  if (ast.highPriorityOpt) {
    this.appendKeyword(ast.highPriorityOpt);
  }
  if (ast.maxStateMentTimeOpt) {
    this.append('MAX_STATEMENT_TIME = ' + ast.maxStateMentTimeOpt);
  }
  if (ast.straightJoinOpt) {
    this.appendKeyword(ast.straightJoinOpt);
  }
  if (ast.sqlSmallResultOpt) {
    this.appendKeyword(ast.sqlSmallResultOpt);
  }
  if (ast.sqlBigResultOpt) {
    this.appendKeyword(ast.sqlBigResultOpt);
  }
  if (ast.sqlBufferResultOpt) {
    this.appendKeyword(ast.sqlBufferResultOpt);
  }
  if (ast.sqlCacheOpt) {
    this.appendKeyword(ast.sqlCacheOpt);
  }
  if (ast.sqlCalcFoundRowsOpt) {
    this.appendKeyword(ast.sqlCalcFoundRowsOpt);
  }
  if (ast.selectItems) {
    this.stringifySelectItems(ast.selectItems);
  }
}
Sql.prototype.stringifySelectItems = function (ast) {
  var exprList = ast.value;
  for (var i = 0; i < exprList.length; i++) {
    this.stringifySelectExpr(exprList[i]);
    if (i > 0) {
      this.append(',');
    }
  }
}
Sql.prototype.stringifySelectExpr = function (ast) {
  if (typeof ast === 'string') {
    return this.append(ast);
  }
  this.stringifyExpr(ast);
  if (ast.alias) {
    if (ast.hasAs) {
      this.appendKeyword('as');
    }
    this.append(ast.alias);
  }
}
Sql.prototype.stringifyExpr = function (ast) {
  switch (ast.type) {
    case 'IsExpression':
      this.stringifyBooleanPrimary(ast);
      this.appendKeyword('in');
      if (ast.hasNot) {
        this.appendKeyword('not');
      }
      this.append(ast.right.value);
      break;
    case 'NotExpression':
      this.appendKeyword('not');
      this.stringifyExpr(ast.value);
      break;
    case 'OrExpression':
    case 'AndExpression':
    case 'XORExpression':
      this.stringifyExpr(ast.left);
      this.appendKeyword(ast.operator);
      this.stringifyExpr(ast.right);
      break;
    default:
      this.stringifyBooleanPrimary(ast);
      break;
  }
}
Sql.prototype.stringifyBooleanPrimary = function () {
  ;
}

var root = this
// AMD / RequireJS
if (typeof define !== 'undefined' && define.amd) {
    define([], function () {
        return sqlParser;
    });
}
// Node.js
else if (typeof module !== 'undefined' && module.exports) {
    module.exports = sqlParser;
}
// included directly via <script> tag
else {
    root.sqlParser = sqlParser;
}

