/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var sqlParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,3],$V1=[22,23,25,26,27,28,29,30,31,32,35,36,40,42,43,45,46,48,49,51,54,68,71,73,74,75,76,78,79,80,93],$V2=[23,25,26,27,28,29,30,31,32,35,36,40,42,43,45,46,48,49,51,54,68,71,73,74,75,76,78,79,80,93],$V3=[25,26,27,28,29,30,31,32,35,36,40,42,43,45,46,48,49,51,54,68,71,73,74,75,76,78,79,80,93],$V4=[25,27,28,29,30,31,32,35,36,40,42,43,45,46,48,49,51,54,68,71,73,74,75,76,78,79,80,93],$V5=[25,28,29,30,31,32,35,36,40,42,43,45,46,48,49,51,54,68,71,73,74,75,76,78,79,80,93],$V6=[25,29,30,31,32,35,36,40,42,43,45,46,48,49,51,54,68,71,73,74,75,76,78,79,80,93],$V7=[25,30,31,32,35,36,40,42,43,45,46,48,49,51,54,68,71,73,74,75,76,78,79,80,93],$V8=[25,31,32,35,36,40,42,43,45,46,48,49,51,54,68,71,73,74,75,76,78,79,80,93],$V9=[25,32,35,36,40,42,43,45,46,48,49,51,54,68,71,73,74,75,76,78,79,80,93],$Va=[25,35,36,40,42,43,45,46,48,49,51,54,68,71,73,74,75,76,78,79,80,93],$Vb=[1,61],$Vc=[1,31],$Vd=[1,32],$Ve=[1,52],$Vf=[1,59],$Vg=[1,60],$Vh=[1,62],$Vi=[1,63],$Vj=[1,64],$Vk=[1,65],$Vl=[1,66],$Vm=[1,43],$Vn=[1,58],$Vo=[1,53],$Vp=[1,54],$Vq=[1,55],$Vr=[1,56],$Vs=[1,57],$Vt=[1,44],$Vu=[1,45],$Vv=[1,46],$Vw=[1,35],$Vx=[5,56],$Vy=[5,33,56,120],$Vz=[1,74],$VA=[1,71],$VB=[1,72],$VC=[1,73],$VD=[1,75],$VE=[5,33,39,40,56,63,64,66,69,81,99,116,117,118,119,120,126,127,129],$VF=[5,24,33,39,40,56,63,64,66,69,81,99,104,105,106,107,108,109,113,116,117,118,119,120,126,127,129],$VG=[1,90],$VH=[2,92],$VI=[5,24,33,39,40,56,63,64,66,69,81,93,97,98,99,100,101,102,104,105,106,107,108,109,113,116,117,118,119,120,126,127,129],$VJ=[5,24,33,35,39,40,56,63,64,66,69,71,73,81,83,84,85,86,87,88,89,90,91,93,95,97,98,99,100,101,102,104,105,106,107,108,109,113,116,117,118,119,120,126,127,129],$VK=[1,103],$VL=[1,110],$VM=[2,53],$VN=[1,127],$VO=[1,123],$VP=[19,25,40,42,43,45,46,48,49,51,54,68,71,73,74,75,76,78,79,80,111],$VQ=[1,158],$VR=[33,56],$VS=[2,48],$VT=[1,167],$VU=[1,165],$VV=[1,166],$VW=[1,171],$VX=[5,33,56],$VY=[1,173],$VZ=[1,174],$V_=[2,133],$V$=[5,33,56,81,126,127,129],$V01=[5,33,39,40,56,81,126,127,129,133,134,152,153,154],$V11=[5,33,39,40,56,63,64,66,69,81,117,118,119,120,126,127,129],$V21=[5,33,56,81,126,127,129,133,134,152,153,154],$V31=[2,147],$V41=[1,205],$V51=[5,33,56,81,126,127,129,133,134],$V61=[1,225],$V71=[1,226],$V81=[1,227],$V91=[1,244],$Va1=[1,245],$Vb1=[63,66,69],$Vc1=[2,152],$Vd1=[1,255],$Ve1=[54,143],$Vf1=[1,277];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"main":3,"selectClause":4,"EOF":5,"SELECT":6,"distinctOpt":7,"highPriorityOpt":8,"maxStateMentTimeOpt":9,"straightJoinOpt":10,"sqlSmallResultOpt":11,"sqlBigResultOpt":12,"sqlBufferResultOpt":13,"sqlCacheOpt":14,"sqlNoCacheOpt":15,"sqlCalcFoundRowsOpt":16,"selectExprList":17,"selectDataSetOpt":18,"ALL":19,"DISTINCT":20,"DISTINCTROW":21,"HIGH_PRIORITY":22,"MAX_STATEMENT_TIME":23,"=":24,"NUMERIC":25,"STRAIGHT_JOIN":26,"SQL_SMALL_RESULT":27,"SQL_BIG_RESULT":28,"SQL_BUFFER_RESULT":29,"SQL_CACHE":30,"SQL_NO_CACHE":31,"SQL_CALC_FOUND_ROWS":32,",":33,"selectExpr":34,"*":35,"SELECT_EXPR_STAR":36,"expr":37,"selectExprAliasOpt":38,"AS":39,"IDENTIFIER":40,"string":41,"QUOTED_IDENTIFIER":42,"STRING":43,"number":44,"EXPONENT_NUMERIC":45,"HEX_NUMERIC":46,"boolean":47,"TRUE":48,"FALSE":49,"null":50,"NULL":51,"literal":52,"function_call":53,"(":54,"function_call_param_list":55,")":56,"function_call_param":57,"identifier":58,"DOT":59,"identifier_list":60,"case_expr":61,"when_then_list":62,"WHEN":63,"THEN":64,"case_when_else":65,"ELSE":66,"case_when":67,"CASE":68,"END":69,"simple_expr_prefix":70,"+":71,"simple_expr":72,"-":73,"~":74,"!":75,"BINARY":76,"expr_list":77,"ROW":78,"EXISTS":79,"{":80,"}":81,"bit_expr":82,"|":83,"&":84,"<<":85,">>":86,"/":87,"DIV":88,"MOD":89,"%":90,"^":91,"not_opt":92,"NOT":93,"escape_opt":94,"ESCAPE":95,"predicate":96,"IN":97,"BETWEEN":98,"AND":99,"SOUNDS":100,"LIKE":101,"REGEXP":102,"comparison_operator":103,">=":104,">":105,"<=":106,"<":107,"<>":108,"!=":109,"sub_query_data_set_opt":110,"ANY":111,"boolean_primary":112,"IS":113,"boolean_extra":114,"UNKNOWN":115,"&&":116,"||":117,"OR":118,"XOR":119,"FROM":120,"table_refrences":121,"escaped_table_reference":122,"table_reference":123,"OJ":124,"join_inner_cross":125,"INNER":126,"CROSS":127,"join_table":128,"JOIN":129,"table_factor":130,"join_condition_opt":131,"join_condition":132,"ON":133,"USING":134,"partition_names":135,"partitionOpt":136,"PARTITION":137,"aliasOpt":138,"index_or_key":139,"INDEX":140,"KEY":141,"for_opt":142,"FOR":143,"ORDER_BY":144,"GROUP_BY":145,"index_name":146,"index_list":147,"index_list_opt":148,"index_hint_list_opt":149,"index_hint_list":150,"index_hint":151,"USE":152,"IGNORE":153,"FORCE":154,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"SELECT",19:"ALL",20:"DISTINCT",21:"DISTINCTROW",22:"HIGH_PRIORITY",23:"MAX_STATEMENT_TIME",24:"=",25:"NUMERIC",26:"STRAIGHT_JOIN",27:"SQL_SMALL_RESULT",28:"SQL_BIG_RESULT",29:"SQL_BUFFER_RESULT",30:"SQL_CACHE",31:"SQL_NO_CACHE",32:"SQL_CALC_FOUND_ROWS",33:",",35:"*",36:"SELECT_EXPR_STAR",39:"AS",40:"IDENTIFIER",42:"QUOTED_IDENTIFIER",43:"STRING",45:"EXPONENT_NUMERIC",46:"HEX_NUMERIC",48:"TRUE",49:"FALSE",51:"NULL",54:"(",56:")",59:"DOT",63:"WHEN",64:"THEN",66:"ELSE",68:"CASE",69:"END",71:"+",73:"-",74:"~",75:"!",76:"BINARY",78:"ROW",79:"EXISTS",80:"{",81:"}",83:"|",84:"&",85:"<<",86:">>",87:"/",88:"DIV",89:"MOD",90:"%",91:"^",93:"NOT",95:"ESCAPE",97:"IN",98:"BETWEEN",99:"AND",100:"SOUNDS",101:"LIKE",102:"REGEXP",104:">=",105:">",106:"<=",107:"<",108:"<>",109:"!=",111:"ANY",113:"IS",115:"UNKNOWN",116:"&&",117:"||",118:"OR",119:"XOR",120:"FROM",124:"OJ",126:"INNER",127:"CROSS",129:"JOIN",133:"ON",134:"USING",137:"PARTITION",140:"INDEX",141:"KEY",143:"FOR",144:"ORDER_BY",145:"GROUP_BY",152:"USE",153:"IGNORE",154:"FORCE"},
productions_: [0,[3,2],[4,13],[7,1],[7,1],[7,1],[7,0],[8,1],[8,0],[9,3],[9,0],[10,1],[10,0],[11,1],[11,0],[12,1],[12,0],[13,1],[13,0],[14,1],[14,0],[15,1],[15,0],[16,1],[16,0],[17,3],[17,1],[34,1],[34,1],[34,2],[38,0],[38,2],[38,1],[41,1],[41,1],[44,1],[44,1],[44,1],[47,1],[47,1],[50,1],[52,1],[52,1],[52,1],[52,1],[53,4],[55,3],[55,1],[57,0],[57,1],[57,1],[57,2],[57,1],[58,1],[58,3],[60,1],[60,3],[61,0],[61,1],[62,4],[62,5],[65,0],[65,2],[67,5],[70,2],[70,2],[70,2],[70,2],[70,2],[72,1],[72,1],[72,1],[72,1],[72,3],[72,4],[72,3],[72,4],[72,4],[72,1],[82,1],[82,3],[82,3],[82,3],[82,3],[82,3],[82,3],[82,3],[82,3],[82,3],[82,3],[82,3],[82,3],[92,0],[92,1],[94,0],[94,2],[96,1],[96,6],[96,6],[96,4],[96,5],[96,4],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[110,1],[110,1],[112,1],[112,4],[112,3],[112,6],[114,1],[114,1],[37,1],[37,4],[37,2],[37,3],[37,3],[37,3],[37,3],[37,3],[77,1],[77,3],[18,0],[18,2],[121,1],[121,3],[122,1],[122,4],[125,0],[125,1],[125,1],[128,5],[131,0],[131,1],[132,2],[132,4],[123,1],[123,1],[135,1],[135,3],[136,0],[136,4],[138,0],[138,2],[138,1],[139,1],[139,1],[142,0],[142,2],[142,2],[142,2],[146,1],[147,1],[147,3],[148,0],[148,1],[149,0],[149,1],[150,1],[150,3],[151,6],[151,6],[151,6],[130,4],[130,4],[130,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return {nodeType: 'Main', value: $$[$0-1]}; 
break;
case 2:

        return {
          type: 'Select',
          distinctOpt: $$[$0-11],
          highPriorityOpt: $$[$0-10],
          maxStateMentTimeOpt: $$[$0-9],
          straightJoinOpt: $$[$0-8],
          sqlSmallResultOpt: $$[$0-7],
          sqlBigResultOpt: $$[$0-6],
          sqlBufferResultOpt: $$[$0-5],
          sqlCacheOpt: $$[$0-4],
          sqlNoCacheOpt: $$[$0-3],
          sqlCalcFoundRowsOpt: $$[$0-2],
          selectExprList: $$[$0-1],
          from: $$[$0].from
        }
      
break;
case 3: case 4: case 5: case 9: case 41: case 42: case 43: case 44: case 49: case 50: case 52: case 58: case 62: case 69: case 70: case 71: case 72: case 78: case 79: case 95: case 96: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 115: case 117: case 134: case 135: case 138: case 141: case 142: case 150: case 151: case 156: case 160: case 162:
 this.$ = $$[$0] 
break;
case 6: case 8: case 10: case 12: case 14: case 16: case 18: case 20: case 22: case 24: case 48: case 57: case 61: case 94: case 133: case 137: case 145: case 152: case 159: case 161:
 this.$ = null 
break;
case 7: case 11: case 13: case 15: case 17: case 19: case 21: case 23: case 93:
 this.$ = true 
break;
case 25:
 $$[$0].type = 'SelectExpr'; this.$.push($$[$0]); 
break;
case 26:
 $$[$0].type = 'SelectExpr'; this.$ = [ $$[$0] ]; 
break;
case 27: case 28:
 this.$ = { value: $$[$0] } 
break;
case 29:
 this.$ = $$[$0-1]; this.$.alias = $$[$0].alias; this.$.hasAs = $$[$0].hasAs; 
break;
case 30: case 147:
 this.$ = {alias: null, hasAs: null} 
break;
case 31:
 this.$ = {alias: $$[$0], hasAs: true} 
break;
case 32:
 this.$ = {alias: $$[$0], hasAs: false} 
break;
case 33: case 34:
 this.$ = { type: 'String', value: $$[$0] } 
break;
case 35: case 36: case 37:
 this.$ = { type: 'Number', value: $$[$0] } 
break;
case 38:
 this.$ = { type: 'Boolean', value: 'TRUE' } 
break;
case 39:
 this.$ = { type: 'Boolean', value: 'FALSE' } 
break;
case 40:
 this.$ = { type: 'Null', value: 'null' } 
break;
case 45:
 this.$ = {type: 'FunctionCall', name: $$[$0-3], params: $$[$0-1]} 
break;
case 46:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 47:
 this.$ = [$$[$0]]; 
break;
case 51:
 this.$ = { type: 'FunctionCallParam', distinctOpt: $$[$0-1], value: $$[$0] } 
break;
case 53:
 this.$ = { type: 'Identifier', value: $$[$0] } 
break;
case 54:
 this.$ = $$[$0-2]; $$[$0-2].value += '.' + $$[$0] 
break;
case 55:
 this.$ = { type: 'IdentifierList', value: [ $$[$0] ] } 
break;
case 56: case 130:
 this.$ = $$[$0-2]; $$[$0-2].value.push($$[$0]); 
break;
case 59:
 this.$ = { type: 'WhenThenList', value: [ { when: $$[$0-2], then: $$[$0] } ] }; 
break;
case 60:
 this.$ = $$[$0-4]; this.$.value.push({ when: $$[$0-2], then: $$[$0] }); 
break;
case 63:
 this.$ = { type: 'CaseWhen', caseExpr: $$[$0-3], whenThenList: $$[$0-2], else: $$[$0-1] } 
break;
case 64: case 65: case 66: case 67: case 68:
 this.$ = $$[$0]; if (!this.$.prefix) this.$.prefix = [ $$[$0-1] ]; else this.$.prefix.push($$[$0-1]); 
break;
case 73:
 this.$ = $$[$0-1]; this.$.hasParentheses = true; 
break;
case 74:
 this.$ = $$[$0-1]; this.$.hasParentheses = true; this.$.hasRow = true; 
break;
case 75:
 this.$ = { type: 'SubQuery', value: $$[$0-1] } 
break;
case 76:
 this.$ = { type: 'ExistsSubQuery', value: $$[$0-1] } 
break;
case 77:
 this.$ = { type: 'IdentifierExpr', identifier: $$[$0-2], value: $$[$0-1] } 
break;
case 80:
 this.$ = { type: 'BitExpression', operator: '|', left: $$[$0-2], right: $$[$0] } 
break;
case 81:
 this.$ = { type: 'BitExpression', operator: '&', left: $$[$0-2], right: $$[$0] } 
break;
case 82:
 this.$ = { type: 'BitExpression', operator: '<<', left: $$[$0-2], right: $$[$0] } 
break;
case 83:
 this.$ = { type: 'BitExpression', operator: '>>', left: $$[$0-2], right: $$[$0] } 
break;
case 84:
 this.$ = { type: 'BitExpression', operator: '+', left: $$[$0-2], right: $$[$0] } 
break;
case 85:
 this.$ = { type: 'BitExpression', operator: '-', left: $$[$0-2], right: $$[$0] } 
break;
case 86:
 this.$ = { type: 'BitExpression', operator: '*', left: $$[$0-2], right: $$[$0] } 
break;
case 87:
 this.$ = { type: 'BitExpression', operator: '/', left: $$[$0-2], right: $$[$0] } 
break;
case 88:
 this.$ = { type: 'BitExpression', operator: 'DIV', left: $$[$0-2], right: $$[$0] } 
break;
case 89:
 this.$ = { type: 'BitExpression', operator: 'MOD', left: $$[$0-2], right: $$[$0] } 
break;
case 90:
 this.$ = { type: 'BitExpression', operator: '%', left: $$[$0-2], right: $$[$0] } 
break;
case 91:
 this.$ = { type: 'BitExpression', operator: '^', left: $$[$0-2], right: $$[$0] } 
break;
case 92:
 this.$ = false 
break;
case 97:
 this.$ = { type: 'InPredicate', hasNot: $$[$0-4], left: $$[$0-5] ,right: $$[$0-1] } 
break;
case 98:
 this.$ = { type: 'BetweenPredicate', hasNot: $$[$0-4], left: $$[$0-5], right: { left: $$[$0-3], right: $$[$0-1] } } 
break;
case 99:
 this.$ = { type: 'SoundsLikePredicate', hasNot: false, left: $$[$0-3], right: $$[$0] } 
break;
case 100:
 this.$ = { type: 'LikePredicate', hasNot: $$[$0-3], left: $$[$0-4], right: $$[$0-1], escape: $$[$0] } 
break;
case 101:
 this.$ = { type: 'RegexpPredicate', hasNot: $$[$0-2], left: $$[$0-3], right: $$[$0] } 
break;
case 112:
 this.$ = { type: 'IsNullBooleanPrimary', hasNot: $$[$0-1] , value: $$[$0-3] } 
break;
case 113:
 this.$ = { type: 'ComparisonBooleanPrimary', left: $$[$0-2], operator: $$[$0-1], right: $$[$0] } 
break;
case 114:
 this.$ = { type: 'ComparisonSubQueryBooleanPrimary', operator: $$[$0-4], subQueryOpt: $$[$0-3], left: $$[$0-5], right: $$[$0-1] } 
break;
case 116:
 this.$ = { type: 'BooleanExtra', value: $$[$0] } 
break;
case 118:
 this.$ = { type: 'IsExpression', hasNot: $$[$0-1], left: $$[$0-3], right: $$[$0] } 
break;
case 119:
 this.$ = { type: 'NotExpression', value: $$[$0] } 
break;
case 120:
 this.$ = { type: 'AndOpExpression', left: $$[$0-2], right: $$[$0] } 
break;
case 121:
 this.$ = { type: 'OrOpExpression', left: $$[$0-2], right: $$[$0] } 
break;
case 122:
 this.$ = { type: 'OrExpression', left: $$[$0-2], right: $$[$0] } 
break;
case 123:
 this.$ = { type: 'AndExpression', left: $$[$0-2], right: $$[$0] } 
break;
case 124:
 this.$ = { type: 'XORExpression', left: $$[$0-2], right: $$[$0] } 
break;
case 125:
 this.$ = { type: 'ExpressionList', value: [ $$[$0] ] } 
break;
case 126: case 158: case 164:
 this.$ = $$[$0-2]; this.$.value.push($$[$0]); 
break;
case 127:
 this.$ = {} 
break;
case 128:
 this.$ = { from: $$[$0] } 
break;
case 129:
 this.$ = { type: 'TableRefrences', value: [ $$[$0] ] } 
break;
case 131:
 this.$ = { type: 'TableRefrence', value: $$[$0] } 
break;
case 132:
 this.$ = { type: 'TableRefrence', hasOj: true, value: $$[$0-1] } 
break;
case 136:
 this.$ = { type: 'InnerCrossJoinTable', innerCross: $$[$0-3], left: $$[$0-4], right: $$[$0-1], condition: $$[$0] } 
break;
case 139:
 this.$ = { type: 'OnJoinCondition', value: $$[$0] } 
break;
case 140:
 this.$ = { type: 'UsingJoinCondition', value: $$[$0-1] } 
break;
case 143:
 this.$ = { type: 'Partitions', value: [ $$[$0] ] } 
break;
case 144:
 this.$ = $$[$0-2]; $$[$0-2].value.push($$[$0]) 
break;
case 146:
 this.$ = $$[$0-1] 
break;
case 148:
 this.$ = { hasAs: true, alias: $$[$0] } 
break;
case 149:
 this.$ = { hasAs: false, alias: $$[$0] } 
break;
case 153: case 154: case 155:
 this.$ = { type: 'ForOptIndexHint', value: $$[$0] } 
break;
case 157:
 this.$ = { type: 'IndexList', value: [ $$[$0] ] } 
break;
case 163:
 this.$ = { type: 'IndexHintList', value: [ $$[$0] ] } 
break;
case 165:
 this.$ = { type: 'UseIndexHint', value: $$[$0-1], forOpt: $$[$0-3], indexOrKey: $$[$0-4] } 
break;
case 166:
 this.$ = { type: 'IgnoreIndexHint', value: $$[$0-1], forOpt: $$[$0-3], indexOrKey: $$[$0-4] } 
break;
case 167:
 this.$ = { type: 'ForceIndexHint', value: $$[$0-1], forOpt: $$[$0-3], indexOrKey: $$[$0-4] } 
break;
case 168:
 this.$ = { type: 'TableFactor', value: $$[$0-3], partition: $$[$0-2], alias: $$[$0-1].alias, hasAs: $$[$0-1].hasAs } 
break;
case 169:
 this.$ = { type: 'SubQuery', value: $$[$0-2], alias: $$[$0].alias, hasAs: $$[$0].hasAs } 
break;
case 170:
 this.$ = $$[$0-1]; this.$.hasParentheses = true 
break;
}
},
table: [{3:1,4:2,6:$V0},{1:[3]},{5:[1,4]},o($V1,[2,6],{7:5,19:[1,6],20:[1,7],21:[1,8]}),{1:[2,1]},o($V2,[2,8],{8:9,22:[1,10]}),o($V1,[2,3]),o($V1,[2,4]),o($V1,[2,5]),o($V3,[2,10],{9:11,23:[1,12]}),o($V2,[2,7]),o($V4,[2,12],{10:13,26:[1,14]}),{24:[1,15]},o($V5,[2,14],{11:16,27:[1,17]}),o($V4,[2,11]),{25:[1,18]},o($V6,[2,16],{12:19,28:[1,20]}),o($V5,[2,13]),o($V3,[2,9]),o($V7,[2,18],{13:21,29:[1,22]}),o($V6,[2,15]),o($V8,[2,20],{14:23,30:[1,24]}),o($V7,[2,17]),o($V9,[2,22],{15:25,31:[1,26]}),o($V8,[2,19]),o($Va,[2,24],{16:27,32:[1,28]}),o($V9,[2,21]),{17:29,25:$Vb,34:30,35:$Vc,36:$Vd,37:33,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:38,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv,82:37,93:$Vw,96:36,112:34},o($Va,[2,23]),o($Vx,[2,127],{18:67,33:[1,68],120:[1,69]}),o($Vy,[2,26]),o($Vy,[2,27]),o($Vy,[2,28]),o($Vy,[2,30],{38:70,39:[1,76],40:[1,77],99:$Vz,116:$VA,117:$VB,118:$VC,119:$VD}),o($VE,[2,117],{103:79,24:[1,80],104:[1,81],105:[1,82],106:[1,83],107:[1,84],108:[1,85],109:[1,86],113:[1,78]}),{25:$Vb,37:87,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:38,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv,82:37,93:$Vw,96:36,112:34},o($VF,[2,111]),o($VF,[2,96],{92:88,93:$VG,97:$VH,98:$VH,101:$VH,102:$VH,100:[1,89]}),o($VI,[2,79],{35:[1,97],71:[1,95],73:[1,96],83:[1,91],84:[1,92],85:[1,93],86:[1,94],87:[1,98],88:[1,99],89:[1,100],90:[1,101],91:[1,102]}),o($VJ,[2,69]),o($VJ,[2,70],{59:$VK}),o($VJ,[2,71]),o($VJ,[2,72]),{4:105,6:$V0,25:$Vb,37:106,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:38,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:104,78:$Vt,79:$Vu,80:$Vv,82:37,93:$Vw,96:36,112:34},{54:[1,107]},{54:[1,108]},{40:$VL,58:109},o($VJ,[2,78]),o($VJ,[2,41]),o($VJ,[2,42]),o($VJ,[2,43]),o($VJ,[2,44]),o([5,24,33,35,39,40,56,59,63,64,66,69,71,73,81,83,84,85,86,87,88,89,90,91,93,95,97,98,99,100,101,102,104,105,106,107,108,109,113,116,117,118,119,120,126,127,129],$VM,{54:[1,111]}),{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:112,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv},{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:113,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv},{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:114,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv},{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:115,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv},{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:116,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv},{25:$Vb,37:118,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,61:117,63:[2,57],67:47,68:$Vn,70:42,71:$Vo,72:38,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv,82:37,93:$Vw,96:36,112:34},o($VJ,[2,33]),o($VJ,[2,34]),o($VJ,[2,35]),o($VJ,[2,36]),o($VJ,[2,37]),o($VJ,[2,38]),o($VJ,[2,39]),o($VJ,[2,40]),o($Vx,[2,2]),{25:$Vb,34:119,35:$Vc,36:$Vd,37:33,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:38,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv,82:37,93:$Vw,96:36,112:34},{40:$VL,54:$VN,58:126,80:$VO,121:120,122:121,123:122,128:125,130:124},o($Vy,[2,29]),{25:$Vb,37:128,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:38,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv,82:37,93:$Vw,96:36,112:34},{25:$Vb,37:129,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:38,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv,82:37,93:$Vw,96:36,112:34},{25:$Vb,37:130,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:38,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv,82:37,93:$Vw,96:36,112:34},{25:$Vb,37:131,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:38,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv,82:37,93:$Vw,96:36,112:34},{25:$Vb,37:132,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:38,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv,82:37,93:$Vw,96:36,112:34},{40:[1,133]},o($Vy,[2,32]),o([48,49,51,115],$VH,{92:134,93:$VG}),{19:[1,137],25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:38,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv,82:37,96:135,110:136,111:[1,138]},o($VP,[2,102]),o($VP,[2,103]),o($VP,[2,104]),o($VP,[2,105]),o($VP,[2,106]),o($VP,[2,107]),o($VP,[2,108]),o($VE,[2,119]),{97:[1,139],98:[1,140],101:[1,141],102:[1,142]},{101:[1,143]},o([48,49,51,97,98,101,102,115],[2,93]),{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:38,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv,82:144},{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:38,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv,82:145},{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:38,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv,82:146},{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:38,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv,82:147},{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:38,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv,82:148},{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:38,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv,82:149},{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:38,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv,82:150},{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:38,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv,82:151},{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:38,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv,82:152},{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:38,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv,82:153},{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:38,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv,82:154},{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:38,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv,82:155},{40:[1,156]},{33:$VQ,56:[1,157]},{56:[1,159]},o($VR,[2,125],{99:$Vz,116:$VA,117:$VB,118:$VC,119:$VD}),{25:$Vb,37:106,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:38,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:160,78:$Vt,79:$Vu,80:$Vv,82:37,93:$Vw,96:36,112:34},{4:161,6:$V0},{25:$Vb,37:162,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,59:$VK,67:47,68:$Vn,70:42,71:$Vo,72:38,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv,82:37,93:$Vw,96:36,112:34},o([5,25,33,39,40,42,43,45,46,48,49,51,54,56,59,68,71,73,74,75,76,78,79,80,81,93,126,127,129,133,134,137,152,153,154],$VM),o($VR,$VS,{112:34,96:36,82:37,72:38,52:39,58:40,53:41,70:42,67:47,41:48,44:49,47:50,50:51,55:163,57:164,37:168,20:$VT,25:$Vb,35:$VU,36:$VV,40:$Ve,42:$Vf,43:$Vg,45:$Vh,46:$Vi,48:$Vj,49:$Vk,51:$Vl,54:$Vm,68:$Vn,71:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv,93:$Vw}),o($VJ,[2,64]),o($VJ,[2,65]),o($VJ,[2,66]),o($VJ,[2,67]),o($VJ,[2,68]),{62:169,63:[1,170]},{63:[2,58],99:$Vz,116:$VA,117:$VB,118:$VC,119:$VD},o($Vy,[2,25]),o($Vx,[2,128],{33:$VW}),o($VX,[2,129]),o($VX,[2,131],{125:172,126:$VY,127:$VZ,129:$V_}),{124:[1,175]},o($V$,[2,141]),o($V$,[2,142]),o($V01,[2,145],{136:176,59:$VK,137:[1,177]}),{4:178,6:$V0,40:$VL,54:$VN,58:126,80:$VO,121:179,122:121,123:122,128:125,130:124},o($VE,[2,120]),o($V11,[2,121],{99:$Vz,116:$VA}),o($V11,[2,122],{99:$Vz,116:$VA}),o($VE,[2,123]),o($V11,[2,124],{99:$Vz,116:$VA}),o($Vy,[2,31]),{47:182,48:$Vj,49:$Vk,51:[1,181],114:180,115:[1,183]},o($VF,[2,113]),{54:[1,184]},{54:[2,109]},{54:[2,110]},{54:[1,185]},{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:38,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv,82:186},{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:187,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv},{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:38,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv,82:188},{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:38,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv,82:189},o($VI,[2,80]),o($VI,[2,81]),o($VI,[2,82]),o($VI,[2,83]),o($VI,[2,84]),o($VI,[2,85]),o($VI,[2,86]),o($VI,[2,87]),o($VI,[2,88]),o($VI,[2,89]),o($VI,[2,90]),o($VI,[2,91]),o([5,24,25,33,35,39,40,42,43,45,46,48,49,51,54,56,59,63,64,66,68,69,71,73,74,75,76,78,79,80,81,83,84,85,86,87,88,89,90,91,93,95,97,98,99,100,101,102,104,105,106,107,108,109,113,116,117,118,119,120,126,127,129,133,134,137,152,153,154],[2,54]),o($VJ,[2,73]),{25:$Vb,37:190,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:38,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv,82:37,93:$Vw,96:36,112:34},o($VJ,[2,75]),{33:$VQ,56:[1,191]},{56:[1,192]},{81:[1,193],99:$Vz,116:$VA,117:$VB,118:$VC,119:$VD},{33:[1,195],56:[1,194]},o($VR,[2,47]),o($VR,[2,49]),o($VR,[2,50]),{25:$Vb,37:196,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:38,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv,82:37,93:$Vw,96:36,112:34},o($VR,[2,52],{99:$Vz,116:$VA,117:$VB,118:$VC,119:$VD}),{63:[1,198],65:197,66:[1,199],69:[2,61]},{25:$Vb,37:200,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:38,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv,82:37,93:$Vw,96:36,112:34},{40:$VL,54:$VN,58:126,80:$VO,122:201,123:122,128:125,130:124},{129:[1,202]},{129:[2,134]},{129:[2,135]},{40:$VL,54:$VN,58:126,123:203,128:125,130:124},o($V21,$V31,{138:204,58:206,39:$V41,40:$VL}),{54:[1,207]},{56:[1,208]},{33:$VW,56:[1,209]},o($VE,[2,118]),o($VF,[2,112]),o($VE,[2,115]),o($VE,[2,116]),{4:210,6:$V0},{4:211,6:$V0},{99:[1,212]},o($VF,[2,94],{94:213,95:[1,214]}),o($VF,[2,101]),o($VF,[2,99]),o($VR,[2,126],{99:$Vz,116:$VA,117:$VB,118:$VC,119:$VD}),o($VJ,[2,74]),o($VJ,[2,76]),o($VJ,[2,77]),o($VJ,[2,45]),o($VR,$VS,{112:34,96:36,82:37,72:38,52:39,58:40,53:41,70:42,67:47,41:48,44:49,47:50,50:51,37:168,57:215,20:$VT,25:$Vb,35:$VU,36:$VV,40:$Ve,42:$Vf,43:$Vg,45:$Vh,46:$Vi,48:$Vj,49:$Vk,51:$Vl,54:$Vm,68:$Vn,71:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv,93:$Vw}),o($VR,[2,51],{99:$Vz,116:$VA,117:$VB,118:$VC,119:$VD}),{69:[1,216]},{25:$Vb,37:217,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:38,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv,82:37,93:$Vw,96:36,112:34},{25:$Vb,37:218,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:38,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv,82:37,93:$Vw,96:36,112:34},{64:[1,219],99:$Vz,116:$VA,117:$VB,118:$VC,119:$VD},o($VX,[2,130]),{40:$VL,54:$VN,58:126,130:220},{81:[1,221],125:172,126:$VY,127:$VZ,129:$V_},o($V51,[2,161],{149:222,150:223,151:224,152:$V61,153:$V71,154:$V81}),{40:$VL,58:228},o($V21,[2,149],{59:$VK}),{40:$VL,58:230,135:229},o($V51,$V31,{58:206,138:231,39:$V41,40:$VL}),o($V51,[2,170]),{56:[1,232]},{56:[1,233]},{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:38,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv,82:37,96:234},o($VF,[2,100]),{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:235,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv},o($VR,[2,46]),o($VJ,[2,63]),{64:[1,236],99:$Vz,116:$VA,117:$VB,118:$VC,119:$VD},{69:[2,62],99:$Vz,116:$VA,117:$VB,118:$VC,119:$VD},{25:$Vb,37:237,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:38,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv,82:37,93:$Vw,96:36,112:34},o($V$,[2,137],{131:238,132:239,133:[1,240],134:[1,241]}),o($VX,[2,132]),o($V51,[2,168]),o($V51,[2,162]),o($V51,[2,163]),{139:243,140:$V91,141:$Va1},{139:246,140:$V91,141:$Va1},{139:247,140:$V91,141:$Va1},o($V21,[2,148],{59:$VK}),{33:[1,249],56:[1,248]},o($VR,[2,143],{59:$VK}),o($V51,[2,169]),o($VF,[2,114]),o($VF,[2,97]),o($VF,[2,98]),o($VF,[2,95]),{25:$Vb,37:250,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:38,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv,82:37,93:$Vw,96:36,112:34},o($Vb1,[2,59],{99:$Vz,116:$VA,117:$VB,118:$VC,119:$VD}),o($V$,[2,136]),o($V$,[2,138]),{25:$Vb,37:251,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,67:47,68:$Vn,70:42,71:$Vo,72:38,73:$Vp,74:$Vq,75:$Vr,76:$Vs,78:$Vt,79:$Vu,80:$Vv,82:37,93:$Vw,96:36,112:34},{54:[1,252]},{151:253,152:$V61,153:$V71,154:$V81},{54:$Vc1,142:254,143:$Vd1},o($Ve1,[2,150]),o($Ve1,[2,151]),{54:$Vc1,142:256,143:$Vd1},{54:$Vc1,142:257,143:$Vd1},o($V01,[2,146]),{40:$VL,58:258},o($Vb1,[2,60],{99:$Vz,116:$VA,117:$VB,118:$VC,119:$VD}),o($V$,[2,139],{99:$Vz,116:$VA,117:$VB,118:$VC,119:$VD}),{40:$VL,58:260,60:259},o($V51,[2,164]),{54:[1,261]},{129:[1,262],144:[1,263],145:[1,264]},{54:[1,265]},{54:[1,266]},o($VR,[2,144],{59:$VK}),{33:[1,268],56:[1,267]},o($VR,[2,55],{59:$VK}),{40:$VL,56:[2,159],58:272,146:271,147:270,148:269},{54:[2,153]},{54:[2,154]},{54:[2,155]},{40:$VL,58:272,146:271,147:273},{40:$VL,58:272,146:271,147:274},o($V$,[2,140]),{40:$VL,58:275},{56:[1,276]},{33:$Vf1,56:[2,160]},o($VR,[2,157]),o($VR,[2,156],{59:$VK}),{33:$Vf1,56:[1,278]},{33:$Vf1,56:[1,279]},o($VR,[2,56],{59:$VK}),o($V51,[2,165]),{40:$VL,58:272,146:280},o($V51,[2,166]),o($V51,[2,167]),o($VR,[2,158])],
defaultActions: {4:[2,1],137:[2,109],138:[2,110],173:[2,134],174:[2,135],262:[2,153],263:[2,154],264:[2,155]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:/* skip sql comments */
break;
case 2:/* skip sql comments */
break;
case 3:/* skip whitespace */
break;
case 4:return 6
break;
case 5:return 19
break;
case 6:return 111
break;
case 7:return 20
break;
case 8:return 21
break;
case 9:return 22
break;
case 10:return 23
break;
case 11:return 26
break;
case 12:return 27
break;
case 13:return 28
break;
case 14:return 29
break;
case 15:return 30
break;
case 16:return 31
break;
case 17:return 32
break;
case 18:return 35;
break;
case 19:return 36
break;
case 20:return 39
break;
case 21:return 48
break;
case 22:return 49
break;
case 23:return 51
break;
case 24:return 'COLLATE'
break;
case 25:return 76
break;
case 26:return 78
break;
case 27:return 79
break;
case 28:return 68
break;
case 29:return 63
break;
case 30:return 64
break;
case 31:return 66
break;
case 32:return 69
break;
case 33:return 88
break;
case 34:return 89
break;
case 35:return 93
break;
case 36:return 98
break;
case 37:return 100
break;
case 38:return 101
break;
case 39:return 95
break;
case 40:return 102
break;
case 41:return 113
break;
case 42:return 115
break;
case 43:return 99
break;
case 44:return 118
break;
case 45:return 119
break;
case 46:return 120
break;
case 47:return 137
break;
case 48:return 152
break;
case 49:return 140
break;
case 50:return 141
break;
case 51:return 143
break;
case 52:return 129
break;
case 53:return 144
break;
case 54:return 145
break;
case 55:return 153
break;
case 56:return 154
break;
case 57:return 126
break;
case 58:return 127
break;
case 59:return 133
break;
case 60:return 134
break;
case 61:return 33
break;
case 62:return 24
break;
case 63:return 54
break;
case 64:return 56
break;
case 65:return 74
break;
case 66:return 75
break;
case 67:return 83
break;
case 68:return 84
break;
case 69:return 85
break;
case 70:return 86
break;
case 71:return 71
break;
case 72:return 73
break;
case 73:return 35
break;
case 74:return 87
break;
case 75:return 90
break;
case 76:return 91
break;
case 77:return 104
break;
case 78:return 105
break;
case 79:return 107
break;
case 80:return 106
break;
case 81:return 108
break;
case 82:return 109
break;
case 83:return '<=>'
break;
case 84:return 80
break;
case 85:return 81
break;
case 86:return 43
break;
case 87:return 43
break;
case 88:return 46
break;
case 89:return 25
break;
case 90:return 45
break;
case 91:return 40
break;
case 92:return 59
break;
case 93:return 42
break;
case 94:return 5
break;
case 95:return 'INVALID'
break;
}
},
rules: [/^(?:[\/][*](.|\n)*?[*][\/])/i,/^(?:[-][-]\s.*\n)/i,/^(?:[#]\s.*\n)/i,/^(?:\s+)/i,/^(?:SELECT\b)/i,/^(?:ALL\b)/i,/^(?:ANY\b)/i,/^(?:DISTINCT\b)/i,/^(?:DISTINCTROW\b)/i,/^(?:HIGH_PRIORITY\b)/i,/^(?:MAX_STATEMENT_TIME\b)/i,/^(?:STRAIGHT_JOIN\b)/i,/^(?:SQL_SMALL_RESULT\b)/i,/^(?:SQL_BIG_RESULT\b)/i,/^(?:SQL_BUFFER_RESULT\b)/i,/^(?:SQL_CACHE\b)/i,/^(?:SQL_NO_CACHE\b)/i,/^(?:SQL_CALC_FOUND_ROWS\b)/i,/^(?:\*)/i,/^(?:([a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]+\.){1,2}\*)/i,/^(?:AS\b)/i,/^(?:TRUE\b)/i,/^(?:FALSE\b)/i,/^(?:NULL\b)/i,/^(?:COLLATE\b)/i,/^(?:BINARY\b)/i,/^(?:ROW\b)/i,/^(?:EXISTS\b)/i,/^(?:CASE\b)/i,/^(?:WHEN\b)/i,/^(?:THEN\b)/i,/^(?:ELSE\b)/i,/^(?:END\b)/i,/^(?:DIV\b)/i,/^(?:MOD\b)/i,/^(?:NOT\b)/i,/^(?:BETWEEN\b)/i,/^(?:SOUNDS\b)/i,/^(?:LIKE\b)/i,/^(?:ESCAPE\b)/i,/^(?:REGEXP\b)/i,/^(?:IS\b)/i,/^(?:UNKNOWN\b)/i,/^(?:AND\b)/i,/^(?:OR\b)/i,/^(?:XOR\b)/i,/^(?:FROM\b)/i,/^(?:PARTITION\b)/i,/^(?:USE\b)/i,/^(?:INDEX\b)/i,/^(?:KEY\b)/i,/^(?:FOR\b)/i,/^(?:JOIN\b)/i,/^(?:ORDER\s+BY\b)/i,/^(?:GROUP\s+BY\b)/i,/^(?:IGNORE\b)/i,/^(?:FORCE\b)/i,/^(?:INNER\b)/i,/^(?:CROSS\b)/i,/^(?:ON\b)/i,/^(?:USING\b)/i,/^(?:,)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:~)/i,/^(?:!)/i,/^(?:\|)/i,/^(?:&)/i,/^(?:<<)/i,/^(?:>>)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:<=)/i,/^(?:<>)/i,/^(?:!=)/i,/^(?:<=>)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:['](\\.|[^'])*['])/i,/^(?:["](\\.|[^"])*["])/i,/^(?:[0][x][0-9a-fA-F]+)/i,/^(?:[-]?[0-9]+(\.[0-9]+)?)/i,/^(?:[-]?[0-9]+(\.[0-9]+)?[eE][-][0-9]+(\.[0-9]+)?)/i,/^(?:[a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]*)/i,/^(?:\.)/i,/^(?:['"][a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]*["'])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
var root = this
// AMD / RequireJS
if (typeof define !== 'undefined' && define.amd) {
    define([], function () {
        return sqlParser;
    });
}
// Node.js
else if (typeof module !== 'undefined' && module.exports) {
    module.exports = sqlParser;
}
// included directly via <script> tag
else {
    root.sqlParser = sqlParser;
}

