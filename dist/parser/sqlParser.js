/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var sqlParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,3],$V1=[22,23,25,26,27,28,29,30,31,32,35,36,40,42,43,45,46,48,49,51,54,67,70,72,73,74,75,77,78,79,92],$V2=[23,25,26,27,28,29,30,31,32,35,36,40,42,43,45,46,48,49,51,54,67,70,72,73,74,75,77,78,79,92],$V3=[25,26,27,28,29,30,31,32,35,36,40,42,43,45,46,48,49,51,54,67,70,72,73,74,75,77,78,79,92],$V4=[25,27,28,29,30,31,32,35,36,40,42,43,45,46,48,49,51,54,67,70,72,73,74,75,77,78,79,92],$V5=[25,28,29,30,31,32,35,36,40,42,43,45,46,48,49,51,54,67,70,72,73,74,75,77,78,79,92],$V6=[25,29,30,31,32,35,36,40,42,43,45,46,48,49,51,54,67,70,72,73,74,75,77,78,79,92],$V7=[25,30,31,32,35,36,40,42,43,45,46,48,49,51,54,67,70,72,73,74,75,77,78,79,92],$V8=[25,31,32,35,36,40,42,43,45,46,48,49,51,54,67,70,72,73,74,75,77,78,79,92],$V9=[25,32,35,36,40,42,43,45,46,48,49,51,54,67,70,72,73,74,75,77,78,79,92],$Va=[25,35,36,40,42,43,45,46,48,49,51,54,67,70,72,73,74,75,77,78,79,92],$Vb=[1,61],$Vc=[1,31],$Vd=[1,32],$Ve=[1,52],$Vf=[1,59],$Vg=[1,60],$Vh=[1,62],$Vi=[1,63],$Vj=[1,64],$Vk=[1,65],$Vl=[1,66],$Vm=[1,43],$Vn=[1,58],$Vo=[1,53],$Vp=[1,54],$Vq=[1,55],$Vr=[1,56],$Vs=[1,57],$Vt=[1,44],$Vu=[1,45],$Vv=[1,46],$Vw=[1,35],$Vx=[5,56],$Vy=[5,33,56,119],$Vz=[1,74],$VA=[1,71],$VB=[1,72],$VC=[1,73],$VD=[1,75],$VE=[5,33,39,40,56,62,63,65,68,80,98,115,116,117,118,119],$VF=[5,24,33,39,40,56,62,63,65,68,80,98,103,104,105,106,107,108,112,115,116,117,118,119],$VG=[1,90],$VH=[2,90],$VI=[5,24,33,39,40,56,62,63,65,68,80,92,96,97,98,99,100,101,103,104,105,106,107,108,112,115,116,117,118,119],$VJ=[5,24,33,35,39,40,56,62,63,65,68,70,72,80,82,83,84,85,86,87,88,89,90,92,94,96,97,98,99,100,101,103,104,105,106,107,108,112,115,116,117,118,119],$VK=[1,103],$VL=[1,110],$VM=[2,53],$VN=[1,123],$VO=[1,125],$VP=[19,25,40,42,43,45,46,48,49,51,54,67,70,72,73,74,75,77,78,79,110],$VQ=[1,157],$VR=[33,56],$VS=[2,48],$VT=[1,166],$VU=[1,164],$VV=[1,165],$VW=[5,33,56],$VX=[5,33,56,80],$VY=[5,33,39,40,56,80,144,145,146],$VZ=[5,33,39,40,56,62,63,65,68,80,116,117,118,119],$V_=[5,33,56,80,144,145,146],$V$=[1,215],$V01=[1,216],$V11=[1,217],$V21=[1,229],$V31=[1,230],$V41=[62,65,68],$V51=[2,142],$V61=[1,238],$V71=[54,134],$V81=[1,255];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"main":3,"selectClause":4,"EOF":5,"SELECT":6,"distinctOpt":7,"highPriorityOpt":8,"maxStateMentTimeOpt":9,"straightJoinOpt":10,"sqlSmallResultOpt":11,"sqlBigResultOpt":12,"sqlBufferResultOpt":13,"sqlCacheOpt":14,"sqlNoCacheOpt":15,"sqlCalcFoundRowsOpt":16,"selectExprList":17,"selectDataSetOpt":18,"ALL":19,"DISTINCT":20,"DISTINCTROW":21,"HIGH_PRIORITY":22,"MAX_STATEMENT_TIME":23,"=":24,"NUMERIC":25,"STRAIGHT_JOIN":26,"SQL_SMALL_RESULT":27,"SQL_BIG_RESULT":28,"SQL_BUFFER_RESULT":29,"SQL_CACHE":30,"SQL_NO_CACHE":31,"SQL_CALC_FOUND_ROWS":32,",":33,"selectExpr":34,"*":35,"SELECT_EXPR_STAR":36,"expr":37,"selectExprAliasOpt":38,"AS":39,"IDENTIFIER":40,"string":41,"QUOTED_IDENTIFIER":42,"STRING":43,"number":44,"EXPONENT_NUMERIC":45,"HEX_NUMERIC":46,"boolean":47,"TRUE":48,"FALSE":49,"null":50,"NULL":51,"literal":52,"function_call":53,"(":54,"function_call_param_list":55,")":56,"function_call_param":57,"identifier":58,"DOT":59,"case_expr":60,"when_then_list":61,"WHEN":62,"THEN":63,"case_when_else":64,"ELSE":65,"case_when":66,"CASE":67,"END":68,"simple_expr_prefix":69,"+":70,"simple_expr":71,"-":72,"~":73,"!":74,"BINARY":75,"expr_list":76,"ROW":77,"EXISTS":78,"{":79,"}":80,"bit_expr":81,"|":82,"&":83,"<<":84,">>":85,"/":86,"DIV":87,"MOD":88,"%":89,"^":90,"not_opt":91,"NOT":92,"escape_opt":93,"ESCAPE":94,"predicate":95,"IN":96,"BETWEEN":97,"AND":98,"SOUNDS":99,"LIKE":100,"REGEXP":101,"comparison_operator":102,">=":103,">":104,"<=":105,"<":106,"<>":107,"!=":108,"sub_query_data_set_opt":109,"ANY":110,"boolean_primary":111,"IS":112,"boolean_extra":113,"UNKNOWN":114,"&&":115,"||":116,"OR":117,"XOR":118,"FROM":119,"table_refrences":120,"escaped_table_reference":121,"table_reference":122,"OJ":123,"table_factor":124,"join_table":125,"partition_names":126,"partitionOpt":127,"PARTITION":128,"aliasOpt":129,"index_or_key":130,"INDEX":131,"KEY":132,"for_opt":133,"FOR":134,"JOIN":135,"ORDER_BY":136,"GROUP_BY":137,"index_name":138,"index_list":139,"index_list_opt":140,"index_hint_list_opt":141,"index_hint_list":142,"index_hint":143,"USE":144,"IGNORE":145,"FORCE":146,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"SELECT",19:"ALL",20:"DISTINCT",21:"DISTINCTROW",22:"HIGH_PRIORITY",23:"MAX_STATEMENT_TIME",24:"=",25:"NUMERIC",26:"STRAIGHT_JOIN",27:"SQL_SMALL_RESULT",28:"SQL_BIG_RESULT",29:"SQL_BUFFER_RESULT",30:"SQL_CACHE",31:"SQL_NO_CACHE",32:"SQL_CALC_FOUND_ROWS",33:",",35:"*",36:"SELECT_EXPR_STAR",39:"AS",40:"IDENTIFIER",42:"QUOTED_IDENTIFIER",43:"STRING",45:"EXPONENT_NUMERIC",46:"HEX_NUMERIC",48:"TRUE",49:"FALSE",51:"NULL",54:"(",56:")",59:"DOT",62:"WHEN",63:"THEN",65:"ELSE",67:"CASE",68:"END",70:"+",72:"-",73:"~",74:"!",75:"BINARY",77:"ROW",78:"EXISTS",79:"{",80:"}",82:"|",83:"&",84:"<<",85:">>",86:"/",87:"DIV",88:"MOD",89:"%",90:"^",92:"NOT",94:"ESCAPE",96:"IN",97:"BETWEEN",98:"AND",99:"SOUNDS",100:"LIKE",101:"REGEXP",103:">=",104:">",105:"<=",106:"<",107:"<>",108:"!=",110:"ANY",112:"IS",114:"UNKNOWN",115:"&&",116:"||",117:"OR",118:"XOR",119:"FROM",123:"OJ",125:"join_table",128:"PARTITION",131:"INDEX",132:"KEY",134:"FOR",135:"JOIN",136:"ORDER_BY",137:"GROUP_BY",144:"USE",145:"IGNORE",146:"FORCE"},
productions_: [0,[3,2],[4,13],[7,1],[7,1],[7,1],[7,0],[8,1],[8,0],[9,3],[9,0],[10,1],[10,0],[11,1],[11,0],[12,1],[12,0],[13,1],[13,0],[14,1],[14,0],[15,1],[15,0],[16,1],[16,0],[17,3],[17,1],[34,1],[34,1],[34,2],[38,0],[38,2],[38,1],[41,1],[41,1],[44,1],[44,1],[44,1],[47,1],[47,1],[50,1],[52,1],[52,1],[52,1],[52,1],[53,4],[55,3],[55,1],[57,0],[57,1],[57,1],[57,2],[57,1],[58,1],[58,3],[60,0],[60,1],[61,4],[61,5],[64,0],[64,2],[66,5],[69,2],[69,2],[69,2],[69,2],[69,2],[71,1],[71,1],[71,1],[71,1],[71,3],[71,4],[71,3],[71,4],[71,4],[71,1],[81,1],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[91,0],[91,1],[93,0],[93,2],[95,1],[95,6],[95,6],[95,4],[95,5],[95,4],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[109,1],[109,1],[111,1],[111,4],[111,3],[111,6],[113,1],[113,1],[37,1],[37,4],[37,2],[37,3],[37,3],[37,3],[37,3],[37,3],[76,1],[76,3],[18,0],[18,2],[120,1],[120,3],[121,1],[121,4],[122,1],[122,1],[126,1],[126,3],[127,0],[127,4],[129,0],[129,2],[129,1],[130,1],[130,1],[133,0],[133,2],[133,2],[133,2],[138,1],[139,1],[139,3],[140,0],[140,1],[141,0],[141,1],[142,1],[142,3],[143,6],[143,6],[143,6],[124,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return {nodeType: 'Main', value: $$[$0-1]}; 
break;
case 2:

        return {
          type: 'Select',
          distinctOpt: $$[$0-11],
          highPriorityOpt: $$[$0-10],
          maxStateMentTimeOpt: $$[$0-9],
          straightJoinOpt: $$[$0-8],
          sqlSmallResultOpt: $$[$0-7],
          sqlBigResultOpt: $$[$0-6],
          sqlBufferResultOpt: $$[$0-5],
          sqlCacheOpt: $$[$0-4],
          sqlNoCacheOpt: $$[$0-3],
          sqlCalcFoundRowsOpt: $$[$0-2],
          selectExprList: $$[$0-1],
          from: $$[$0].from
        }
      
break;
case 3: case 4: case 5: case 9: case 41: case 42: case 43: case 44: case 49: case 50: case 52: case 56: case 60: case 67: case 68: case 69: case 70: case 76: case 77: case 93: case 94: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 113: case 115: case 131: case 132: case 140: case 141: case 146: case 150: case 152:
 this.$ = $$[$0] 
break;
case 6: case 8: case 10: case 12: case 14: case 16: case 18: case 20: case 22: case 24: case 48: case 55: case 59: case 92: case 135: case 142: case 149: case 151:
 this.$ = null 
break;
case 7: case 11: case 13: case 15: case 17: case 19: case 21: case 23: case 91:
 this.$ = true 
break;
case 25:
 $$[$0].type = 'SelectExpr'; this.$.push($$[$0]); 
break;
case 26:
 $$[$0].type = 'SelectExpr'; this.$ = [ $$[$0] ]; 
break;
case 27: case 28:
 this.$ = { value: $$[$0] } 
break;
case 29:
 this.$ = $$[$0-1]; this.$.alias = $$[$0].alias; this.$.hasAs = $$[$0].hasAs; 
break;
case 30: case 137:
 this.$ = {alias: null, hasAs: null} 
break;
case 31:
 this.$ = {alias: $$[$0], hasAs: true} 
break;
case 32:
 this.$ = {alias: $$[$0], hasAs: false} 
break;
case 33: case 34:
 this.$ = { type: 'String', value: $$[$0] } 
break;
case 35: case 36: case 37:
 this.$ = { type: 'Number', value: $$[$0] } 
break;
case 38:
 this.$ = { type: 'Boolean', value: 'TRUE' } 
break;
case 39:
 this.$ = { type: 'Boolean', value: 'FALSE' } 
break;
case 40:
 this.$ = { type: 'Null', value: 'null' } 
break;
case 45:
 this.$ = {type: 'FunctionCall', name: $$[$0-3], params: $$[$0-1]} 
break;
case 46:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 47:
 this.$ = [$$[$0]]; 
break;
case 51:
 this.$ = { type: 'FunctionCallParam', distinctOpt: $$[$0-1], value: $$[$0] } 
break;
case 53:
 this.$ = { type: 'Identifier', value: $$[$0] } 
break;
case 54:
 this.$ = $$[$0-2]; $$[$0-2].value += '.' + $$[$0] 
break;
case 57:
 this.$ = { type: 'WhenThenList', value: [ { when: $$[$0-2], then: $$[$0] } ] }; 
break;
case 58:
 this.$ = $$[$0-4]; this.$.value.push({ when: $$[$0-2], then: $$[$0] }); 
break;
case 61:
 this.$ = { type: 'CaseWhen', caseExpr: $$[$0-3], whenThenList: $$[$0-2], else: $$[$0-1] } 
break;
case 62: case 63: case 64: case 65: case 66:
 this.$ = $$[$0]; if (!this.$.prefix) this.$.prefix = [ $$[$0-1] ]; else this.$.prefix.push($$[$0-1]); 
break;
case 71:
 this.$ = $$[$0-1]; this.$.hasParentheses = true; 
break;
case 72:
 this.$ = $$[$0-1]; this.$.hasParentheses = true; this.$.hasRow = true; 
break;
case 73:
 this.$ = { type: 'SubQuery', value: $$[$0-1] } 
break;
case 74:
 this.$ = { type: 'ExistsSubQuery', value: $$[$0-1] } 
break;
case 75:
 this.$ = { type: 'IdentifierExpr', identifier: $$[$0-2], value: $$[$0-1] } 
break;
case 78:
 this.$ = { type: 'BitExpression', operator: '|', left: $$[$0-2], right: $$[$0] } 
break;
case 79:
 this.$ = { type: 'BitExpression', operator: '&', left: $$[$0-2], right: $$[$0] } 
break;
case 80:
 this.$ = { type: 'BitExpression', operator: '<<', left: $$[$0-2], right: $$[$0] } 
break;
case 81:
 this.$ = { type: 'BitExpression', operator: '>>', left: $$[$0-2], right: $$[$0] } 
break;
case 82:
 this.$ = { type: 'BitExpression', operator: '+', left: $$[$0-2], right: $$[$0] } 
break;
case 83:
 this.$ = { type: 'BitExpression', operator: '-', left: $$[$0-2], right: $$[$0] } 
break;
case 84:
 this.$ = { type: 'BitExpression', operator: '*', left: $$[$0-2], right: $$[$0] } 
break;
case 85:
 this.$ = { type: 'BitExpression', operator: '/', left: $$[$0-2], right: $$[$0] } 
break;
case 86:
 this.$ = { type: 'BitExpression', operator: 'DIV', left: $$[$0-2], right: $$[$0] } 
break;
case 87:
 this.$ = { type: 'BitExpression', operator: 'MOD', left: $$[$0-2], right: $$[$0] } 
break;
case 88:
 this.$ = { type: 'BitExpression', operator: '%', left: $$[$0-2], right: $$[$0] } 
break;
case 89:
 this.$ = { type: 'BitExpression', operator: '^', left: $$[$0-2], right: $$[$0] } 
break;
case 90:
 this.$ = false 
break;
case 95:
 this.$ = { type: 'InPredicate', hasNot: $$[$0-4], left: $$[$0-5] ,right: $$[$0-1] } 
break;
case 96:
 this.$ = { type: 'BetweenPredicate', hasNot: $$[$0-4], left: $$[$0-5], right: { left: $$[$0-3], right: $$[$0-1] } } 
break;
case 97:
 this.$ = { type: 'SoundsLikePredicate', hasNot: false, left: $$[$0-3], right: $$[$0] } 
break;
case 98:
 this.$ = { type: 'LikePredicate', hasNot: $$[$0-3], left: $$[$0-4], right: $$[$0-1], escape: $$[$0] } 
break;
case 99:
 this.$ = { type: 'RegexpPredicate', hasNot: $$[$0-2], left: $$[$0-3], right: $$[$0] } 
break;
case 110:
 this.$ = { type: 'IsNullBooleanPrimary', hasNot: $$[$0-1] , value: $$[$0-3] } 
break;
case 111:
 this.$ = { type: 'ComparisonBooleanPrimary', left: $$[$0-2], operator: $$[$0-1], right: $$[$0] } 
break;
case 112:
 this.$ = { type: 'ComparisonSubQueryBooleanPrimary', operator: $$[$0-4], subQueryOpt: $$[$0-3], left: $$[$0-5], right: $$[$0-1] } 
break;
case 114:
 this.$ = { type: 'BooleanExtra', value: $$[$0] } 
break;
case 116:
 this.$ = { type: 'IsExpression', hasNot: $$[$0-1], left: $$[$0-3], right: $$[$0] } 
break;
case 117:
 this.$ = { type: 'NotExpression', value: $$[$0] } 
break;
case 118:
 this.$ = { type: 'AndOpExpression', left: $$[$0-2], right: $$[$0] } 
break;
case 119:
 this.$ = { type: 'OrOpExpression', left: $$[$0-2], right: $$[$0] } 
break;
case 120:
 this.$ = { type: 'OrExpression', left: $$[$0-2], right: $$[$0] } 
break;
case 121:
 this.$ = { type: 'AndExpression', left: $$[$0-2], right: $$[$0] } 
break;
case 122:
 this.$ = { type: 'XORExpression', left: $$[$0-2], right: $$[$0] } 
break;
case 123:
 this.$ = { type: 'ExpressionList', value: [ $$[$0] ] } 
break;
case 124: case 148: case 154:
 this.$ = $$[$0-2]; this.$.value.push($$[$0]); 
break;
case 125:
 this.$ = {} 
break;
case 126:
 this.$ = { from: $$[$0] } 
break;
case 127:
 this.$ = { type: 'TableRefrences', value: [ $$[$0] ] } 
break;
case 128:
 this.$ = $$[$0-2]; $$[$0-2].value.push($$[$0]); 
break;
case 129:
 this.$ = { type: 'TableRefrence', value: $$[$0] } 
break;
case 130:
 this.$ = { type: 'TableRefrence', hasOj: true, value: $$[$0-1] } 
break;
case 133:
 this.$ = { type: 'Partitions', value: [ $$[$0] ] } 
break;
case 134:
 this.$ = $$[$0-2]; $$[$0-2].value.push($$[$0]) 
break;
case 136:
 this.$ = $$[$0-1] 
break;
case 138:
 this.$ = { hasAs: true, alias: $$[$0] } 
break;
case 139:
 this.$ = { hasAs: false, alias: $$[$0] } 
break;
case 143: case 144: case 145:
 this.$ = { type: 'ForOptIndexHint', value: $$[$0] } 
break;
case 147:
 this.$ = { type: 'IndexList', value: [ $$[$0] ] } 
break;
case 153:
 this.$ = { type: 'IndexHintList', value: [ $$[$0] ] } 
break;
case 155:
 this.$ = { type: 'UseIndexHint', value: $$[$0-1], forOpt: $$[$0-3], indexOrKey: $$[$0-4] } 
break;
case 156:
 this.$ = { type: 'IgnoreIndexHint', value: $$[$0-1], forOpt: $$[$0-3], indexOrKey: $$[$0-4] } 
break;
case 157:
 this.$ = { type: 'ForceIndexHint', value: $$[$0-1], forOpt: $$[$0-3], indexOrKey: $$[$0-4] } 
break;
case 158:
 this.$ = { type: 'TableFactor', value: $$[$0-3], partition: $$[$0-2], alias: $$[$0-1].alias, hasAs: $$[$0-1].hasAs } 
break;
}
},
table: [{3:1,4:2,6:$V0},{1:[3]},{5:[1,4]},o($V1,[2,6],{7:5,19:[1,6],20:[1,7],21:[1,8]}),{1:[2,1]},o($V2,[2,8],{8:9,22:[1,10]}),o($V1,[2,3]),o($V1,[2,4]),o($V1,[2,5]),o($V3,[2,10],{9:11,23:[1,12]}),o($V2,[2,7]),o($V4,[2,12],{10:13,26:[1,14]}),{24:[1,15]},o($V5,[2,14],{11:16,27:[1,17]}),o($V4,[2,11]),{25:[1,18]},o($V6,[2,16],{12:19,28:[1,20]}),o($V5,[2,13]),o($V3,[2,9]),o($V7,[2,18],{13:21,29:[1,22]}),o($V6,[2,15]),o($V8,[2,20],{14:23,30:[1,24]}),o($V7,[2,17]),o($V9,[2,22],{15:25,31:[1,26]}),o($V8,[2,19]),o($Va,[2,24],{16:27,32:[1,28]}),o($V9,[2,21]),{17:29,25:$Vb,34:30,35:$Vc,36:$Vd,37:33,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:38,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv,81:37,92:$Vw,95:36,111:34},o($Va,[2,23]),o($Vx,[2,125],{18:67,33:[1,68],119:[1,69]}),o($Vy,[2,26]),o($Vy,[2,27]),o($Vy,[2,28]),o($Vy,[2,30],{38:70,39:[1,76],40:[1,77],98:$Vz,115:$VA,116:$VB,117:$VC,118:$VD}),o($VE,[2,115],{102:79,24:[1,80],103:[1,81],104:[1,82],105:[1,83],106:[1,84],107:[1,85],108:[1,86],112:[1,78]}),{25:$Vb,37:87,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:38,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv,81:37,92:$Vw,95:36,111:34},o($VF,[2,109]),o($VF,[2,94],{91:88,92:$VG,96:$VH,97:$VH,100:$VH,101:$VH,99:[1,89]}),o($VI,[2,77],{35:[1,97],70:[1,95],72:[1,96],82:[1,91],83:[1,92],84:[1,93],85:[1,94],86:[1,98],87:[1,99],88:[1,100],89:[1,101],90:[1,102]}),o($VJ,[2,67]),o($VJ,[2,68],{59:$VK}),o($VJ,[2,69]),o($VJ,[2,70]),{4:105,6:$V0,25:$Vb,37:106,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:38,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:104,77:$Vt,78:$Vu,79:$Vv,81:37,92:$Vw,95:36,111:34},{54:[1,107]},{54:[1,108]},{40:$VL,58:109},o($VJ,[2,76]),o($VJ,[2,41]),o($VJ,[2,42]),o($VJ,[2,43]),o($VJ,[2,44]),o([5,24,33,35,39,40,56,59,62,63,65,68,70,72,80,82,83,84,85,86,87,88,89,90,92,94,96,97,98,99,100,101,103,104,105,106,107,108,112,115,116,117,118,119],$VM,{54:[1,111]}),{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:112,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv},{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:113,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv},{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:114,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv},{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:115,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv},{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:116,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv},{25:$Vb,37:118,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,60:117,62:[2,55],66:47,67:$Vn,69:42,70:$Vo,71:38,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv,81:37,92:$Vw,95:36,111:34},o($VJ,[2,33]),o($VJ,[2,34]),o($VJ,[2,35]),o($VJ,[2,36]),o($VJ,[2,37]),o($VJ,[2,38]),o($VJ,[2,39]),o($VJ,[2,40]),o($Vx,[2,2]),{25:$Vb,34:119,35:$Vc,36:$Vd,37:33,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:38,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv,81:37,92:$Vw,95:36,111:34},{40:$VL,58:126,79:$VN,120:120,121:121,122:122,124:124,125:$VO},o($Vy,[2,29]),{25:$Vb,37:127,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:38,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv,81:37,92:$Vw,95:36,111:34},{25:$Vb,37:128,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:38,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv,81:37,92:$Vw,95:36,111:34},{25:$Vb,37:129,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:38,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv,81:37,92:$Vw,95:36,111:34},{25:$Vb,37:130,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:38,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv,81:37,92:$Vw,95:36,111:34},{25:$Vb,37:131,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:38,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv,81:37,92:$Vw,95:36,111:34},{40:[1,132]},o($Vy,[2,32]),o([48,49,51,114],$VH,{91:133,92:$VG}),{19:[1,136],25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:38,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv,81:37,95:134,109:135,110:[1,137]},o($VP,[2,100]),o($VP,[2,101]),o($VP,[2,102]),o($VP,[2,103]),o($VP,[2,104]),o($VP,[2,105]),o($VP,[2,106]),o($VE,[2,117]),{96:[1,138],97:[1,139],100:[1,140],101:[1,141]},{100:[1,142]},o([48,49,51,96,97,100,101,114],[2,91]),{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:38,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv,81:143},{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:38,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv,81:144},{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:38,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv,81:145},{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:38,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv,81:146},{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:38,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv,81:147},{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:38,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv,81:148},{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:38,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv,81:149},{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:38,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv,81:150},{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:38,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv,81:151},{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:38,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv,81:152},{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:38,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv,81:153},{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:38,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv,81:154},{40:[1,155]},{33:$VQ,56:[1,156]},{56:[1,158]},o($VR,[2,123],{98:$Vz,115:$VA,116:$VB,117:$VC,118:$VD}),{25:$Vb,37:106,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:38,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:159,77:$Vt,78:$Vu,79:$Vv,81:37,92:$Vw,95:36,111:34},{4:160,6:$V0},{25:$Vb,37:161,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,59:$VK,66:47,67:$Vn,69:42,70:$Vo,71:38,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv,81:37,92:$Vw,95:36,111:34},o([5,25,33,39,40,42,43,45,46,48,49,51,54,56,59,67,70,72,73,74,75,77,78,79,80,92,128,144,145,146],$VM),o($VR,$VS,{111:34,95:36,81:37,71:38,52:39,58:40,53:41,69:42,66:47,41:48,44:49,47:50,50:51,55:162,57:163,37:167,20:$VT,25:$Vb,35:$VU,36:$VV,40:$Ve,42:$Vf,43:$Vg,45:$Vh,46:$Vi,48:$Vj,49:$Vk,51:$Vl,54:$Vm,67:$Vn,70:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv,92:$Vw}),o($VJ,[2,62]),o($VJ,[2,63]),o($VJ,[2,64]),o($VJ,[2,65]),o($VJ,[2,66]),{61:168,62:[1,169]},{62:[2,56],98:$Vz,115:$VA,116:$VB,117:$VC,118:$VD},o($Vy,[2,25]),o($Vx,[2,126],{33:[1,170]}),o($VW,[2,127]),o($VW,[2,129]),{123:[1,171]},o($VX,[2,131]),o($VX,[2,132]),o($VY,[2,135],{127:172,59:$VK,128:[1,173]}),o($VE,[2,118]),o($VZ,[2,119],{98:$Vz,115:$VA}),o($VZ,[2,120],{98:$Vz,115:$VA}),o($VE,[2,121]),o($VZ,[2,122],{98:$Vz,115:$VA}),o($Vy,[2,31]),{47:176,48:$Vj,49:$Vk,51:[1,175],113:174,114:[1,177]},o($VF,[2,111]),{54:[1,178]},{54:[2,107]},{54:[2,108]},{54:[1,179]},{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:38,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv,81:180},{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:181,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv},{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:38,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv,81:182},{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:38,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv,81:183},o($VI,[2,78]),o($VI,[2,79]),o($VI,[2,80]),o($VI,[2,81]),o($VI,[2,82]),o($VI,[2,83]),o($VI,[2,84]),o($VI,[2,85]),o($VI,[2,86]),o($VI,[2,87]),o($VI,[2,88]),o($VI,[2,89]),o([5,24,25,33,35,39,40,42,43,45,46,48,49,51,54,56,59,62,63,65,67,68,70,72,73,74,75,77,78,79,80,82,83,84,85,86,87,88,89,90,92,94,96,97,98,99,100,101,103,104,105,106,107,108,112,115,116,117,118,119,128,144,145,146],[2,54]),o($VJ,[2,71]),{25:$Vb,37:184,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:38,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv,81:37,92:$Vw,95:36,111:34},o($VJ,[2,73]),{33:$VQ,56:[1,185]},{56:[1,186]},{80:[1,187],98:$Vz,115:$VA,116:$VB,117:$VC,118:$VD},{33:[1,189],56:[1,188]},o($VR,[2,47]),o($VR,[2,49]),o($VR,[2,50]),{25:$Vb,37:190,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:38,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv,81:37,92:$Vw,95:36,111:34},o($VR,[2,52],{98:$Vz,115:$VA,116:$VB,117:$VC,118:$VD}),{62:[1,192],64:191,65:[1,193],68:[2,59]},{25:$Vb,37:194,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:38,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv,81:37,92:$Vw,95:36,111:34},{40:$VL,58:126,79:$VN,121:195,122:122,124:124,125:$VO},{40:$VL,58:126,122:196,124:124,125:$VO},o($V_,[2,137],{129:197,58:199,39:[1,198],40:$VL}),{54:[1,200]},o($VE,[2,116]),o($VF,[2,110]),o($VE,[2,113]),o($VE,[2,114]),{4:201,6:$V0},{4:202,6:$V0},{98:[1,203]},o($VF,[2,92],{93:204,94:[1,205]}),o($VF,[2,99]),o($VF,[2,97]),o($VR,[2,124],{98:$Vz,115:$VA,116:$VB,117:$VC,118:$VD}),o($VJ,[2,72]),o($VJ,[2,74]),o($VJ,[2,75]),o($VJ,[2,45]),o($VR,$VS,{111:34,95:36,81:37,71:38,52:39,58:40,53:41,69:42,66:47,41:48,44:49,47:50,50:51,37:167,57:206,20:$VT,25:$Vb,35:$VU,36:$VV,40:$Ve,42:$Vf,43:$Vg,45:$Vh,46:$Vi,48:$Vj,49:$Vk,51:$Vl,54:$Vm,67:$Vn,70:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv,92:$Vw}),o($VR,[2,51],{98:$Vz,115:$VA,116:$VB,117:$VC,118:$VD}),{68:[1,207]},{25:$Vb,37:208,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:38,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv,81:37,92:$Vw,95:36,111:34},{25:$Vb,37:209,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:38,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv,81:37,92:$Vw,95:36,111:34},{63:[1,210],98:$Vz,115:$VA,116:$VB,117:$VC,118:$VD},o($VW,[2,128]),{80:[1,211]},o($VX,[2,151],{141:212,142:213,143:214,144:$V$,145:$V01,146:$V11}),{40:$VL,58:218},o($V_,[2,139],{59:$VK}),{40:$VL,58:220,126:219},{56:[1,221]},{56:[1,222]},{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:38,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv,81:37,95:223},o($VF,[2,98]),{25:$Vb,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:224,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv},o($VR,[2,46]),o($VJ,[2,61]),{63:[1,225],98:$Vz,115:$VA,116:$VB,117:$VC,118:$VD},{68:[2,60],98:$Vz,115:$VA,116:$VB,117:$VC,118:$VD},{25:$Vb,37:226,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:38,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv,81:37,92:$Vw,95:36,111:34},o($VW,[2,130]),o($VX,[2,158]),o([5,56,80],[2,152],{33:[1,227]}),o($VX,[2,153]),{130:228,131:$V21,132:$V31},{130:231,131:$V21,132:$V31},{130:232,131:$V21,132:$V31},o($V_,[2,138],{59:$VK}),{33:[1,234],56:[1,233]},o($VR,[2,133],{59:$VK}),o($VF,[2,112]),o($VF,[2,95]),o($VF,[2,96]),o($VF,[2,93]),{25:$Vb,37:235,40:$Ve,41:48,42:$Vf,43:$Vg,44:49,45:$Vh,46:$Vi,47:50,48:$Vj,49:$Vk,50:51,51:$Vl,52:39,53:41,54:$Vm,58:40,66:47,67:$Vn,69:42,70:$Vo,71:38,72:$Vp,73:$Vq,74:$Vr,75:$Vs,77:$Vt,78:$Vu,79:$Vv,81:37,92:$Vw,95:36,111:34},o($V41,[2,57],{98:$Vz,115:$VA,116:$VB,117:$VC,118:$VD}),{143:236,144:$V$,145:$V01,146:$V11},{54:$V51,133:237,134:$V61},o($V71,[2,140]),o($V71,[2,141]),{54:$V51,133:239,134:$V61},{54:$V51,133:240,134:$V61},o($VY,[2,136]),{40:$VL,58:241},o($V41,[2,58],{98:$Vz,115:$VA,116:$VB,117:$VC,118:$VD}),o($VX,[2,154]),{54:[1,242]},{135:[1,243],136:[1,244],137:[1,245]},{54:[1,246]},{54:[1,247]},o($VR,[2,134],{59:$VK}),{40:$VL,56:[2,149],58:251,138:250,139:249,140:248},{54:[2,143]},{54:[2,144]},{54:[2,145]},{40:$VL,58:251,138:250,139:252},{40:$VL,58:251,138:250,139:253},{56:[1,254]},{33:$V81,56:[2,150]},o($VR,[2,147]),o($VR,[2,146],{59:$VK}),{33:$V81,56:[1,256]},{33:$V81,56:[1,257]},o($VX,[2,155]),{40:$VL,58:251,138:258},o($VX,[2,156]),o($VX,[2,157]),o($VR,[2,148])],
defaultActions: {4:[2,1],136:[2,107],137:[2,108],243:[2,143],244:[2,144],245:[2,145]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:/* skip sql comments */
break;
case 2:/* skip sql comments */
break;
case 3:/* skip whitespace */
break;
case 4:return 6
break;
case 5:return 19
break;
case 6:return 110
break;
case 7:return 20
break;
case 8:return 21
break;
case 9:return 22
break;
case 10:return 23
break;
case 11:return 26
break;
case 12:return 27
break;
case 13:return 28
break;
case 14:return 29
break;
case 15:return 30
break;
case 16:return 31
break;
case 17:return 32
break;
case 18:return 35;
break;
case 19:return 36
break;
case 20:return 39
break;
case 21:return 48
break;
case 22:return 49
break;
case 23:return 51
break;
case 24:return 'COLLATE'
break;
case 25:return 75
break;
case 26:return 77
break;
case 27:return 78
break;
case 28:return 67
break;
case 29:return 62
break;
case 30:return 63
break;
case 31:return 65
break;
case 32:return 68
break;
case 33:return 87
break;
case 34:return 88
break;
case 35:return 92
break;
case 36:return 97
break;
case 37:return 99
break;
case 38:return 100
break;
case 39:return 94
break;
case 40:return 101
break;
case 41:return 112
break;
case 42:return 114
break;
case 43:return 98
break;
case 44:return 117
break;
case 45:return 118
break;
case 46:return 119
break;
case 47:return 128
break;
case 48:return 144
break;
case 49:return 131
break;
case 50:return 132
break;
case 51:return 134
break;
case 52:return 135
break;
case 53:return 136
break;
case 54:return 137
break;
case 55:return 145
break;
case 56:return 146
break;
case 57:return 33
break;
case 58:return 24
break;
case 59:return 54
break;
case 60:return 56
break;
case 61:return 73
break;
case 62:return 74
break;
case 63:return 82
break;
case 64:return 83
break;
case 65:return 84
break;
case 66:return 85
break;
case 67:return 70
break;
case 68:return 72
break;
case 69:return 35
break;
case 70:return 86
break;
case 71:return 89
break;
case 72:return 90
break;
case 73:return 103
break;
case 74:return 104
break;
case 75:return 106
break;
case 76:return 105
break;
case 77:return 107
break;
case 78:return 108
break;
case 79:return '<=>'
break;
case 80:return 79
break;
case 81:return 80
break;
case 82:return 43
break;
case 83:return 43
break;
case 84:return 46
break;
case 85:return 25
break;
case 86:return 45
break;
case 87:return 40
break;
case 88:return 59
break;
case 89:return 42
break;
case 90:return 5
break;
case 91:return 'INVALID'
break;
}
},
rules: [/^(?:[\/][*](.|\n)*?[*][\/])/i,/^(?:[-][-]\s.*\n)/i,/^(?:[#]\s.*\n)/i,/^(?:\s+)/i,/^(?:SELECT\b)/i,/^(?:ALL\b)/i,/^(?:ANY\b)/i,/^(?:DISTINCT\b)/i,/^(?:DISTINCTROW\b)/i,/^(?:HIGH_PRIORITY\b)/i,/^(?:MAX_STATEMENT_TIME\b)/i,/^(?:STRAIGHT_JOIN\b)/i,/^(?:SQL_SMALL_RESULT\b)/i,/^(?:SQL_BIG_RESULT\b)/i,/^(?:SQL_BUFFER_RESULT\b)/i,/^(?:SQL_CACHE\b)/i,/^(?:SQL_NO_CACHE\b)/i,/^(?:SQL_CALC_FOUND_ROWS\b)/i,/^(?:\*)/i,/^(?:([a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]+\.){1,2}\*)/i,/^(?:AS\b)/i,/^(?:TRUE\b)/i,/^(?:FALSE\b)/i,/^(?:NULL\b)/i,/^(?:COLLATE\b)/i,/^(?:BINARY\b)/i,/^(?:ROW\b)/i,/^(?:EXISTS\b)/i,/^(?:CASE\b)/i,/^(?:WHEN\b)/i,/^(?:THEN\b)/i,/^(?:ELSE\b)/i,/^(?:END\b)/i,/^(?:DIV\b)/i,/^(?:MOD\b)/i,/^(?:NOT\b)/i,/^(?:BETWEEN\b)/i,/^(?:SOUNDS\b)/i,/^(?:LIKE\b)/i,/^(?:ESCAPE\b)/i,/^(?:REGEXP\b)/i,/^(?:IS\b)/i,/^(?:UNKNOWN\b)/i,/^(?:AND\b)/i,/^(?:OR\b)/i,/^(?:XOR\b)/i,/^(?:FROM\b)/i,/^(?:PARTITION\b)/i,/^(?:USE\b)/i,/^(?:INDEX\b)/i,/^(?:KEY\b)/i,/^(?:FOR\b)/i,/^(?:JOIN\b)/i,/^(?:ORDER\s+BY\b)/i,/^(?:GROUP\s+BY\b)/i,/^(?:IGNORE\b)/i,/^(?:FORCE\b)/i,/^(?:,)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:~)/i,/^(?:!)/i,/^(?:\|)/i,/^(?:&)/i,/^(?:<<)/i,/^(?:>>)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:<=)/i,/^(?:<>)/i,/^(?:!=)/i,/^(?:<=>)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:['](\\.|[^'])*['])/i,/^(?:["](\\.|[^"])*["])/i,/^(?:[0][x][0-9a-fA-F]+)/i,/^(?:[-]?[0-9]+(\.[0-9]+)?)/i,/^(?:[-]?[0-9]+(\.[0-9]+)?[eE][-][0-9]+(\.[0-9]+)?)/i,/^(?:[a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]*)/i,/^(?:\.)/i,/^(?:['"][a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]*["'])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
var root = this
// AMD / RequireJS
if (typeof define !== 'undefined' && define.amd) {
    define([], function () {
        return sqlParser;
    });
}
// Node.js
else if (typeof module !== 'undefined' && module.exports) {
    module.exports = sqlParser;
}
// included directly via <script> tag
else {
    root.sqlParser = sqlParser;
}

